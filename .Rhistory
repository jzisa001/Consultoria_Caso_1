folds <- vfold_cv(datos, v = 10)
# Inicializar lista para almacenar errores
errores <- numeric(length(folds$splits))
# Loop para entrenar y validar el modelo en cada fold
for (i in seq_along(folds$splits)) {
# Dividir datos
train_data <- analysis(folds$splits[[i]])  # Datos de entrenamiento
test_data <- assessment(folds$splits[[i]]) # Datos de validación
# Ajustar el modelo
modelo <- lm(Talla ~ LRT_CM + Edad + Sexo, data = train_data)
# Predicciones
predicciones <- predict(modelo, newdata = test_data)
# Calcular error cuadrático medio
errores[i] <- mean((test_data$Talla - predicciones)^2)
}
# Promedio del error cuadrático medio
mean(errores)
modelo_fin <- lm(Talla ~ LRT_CM + Edad + Sexo, data = datos)
predicciones_test <- predict(modelo_fin, newdata = test)
# Calcular el MSE en test
MSE_test <- mean((test$Talla - predicciones_test)^2)
MSEs <- rbind(MSEs, data.frame(Modelo = "Normal", Medida = "LRT_CM", MSE = mean(errores), MSE_validacion = MSE_test))
#| results: hide
regfit.full <- regsubsets(Talla ~ LRM_R + Edad + Sexo + Etnia,
datos, nbest = 1, nvmax = 10) # Mejor modelo de cada número de variables
(reg.summary <- summary(regfit.full))
# Crear 10 folds
set.seed(123)  # Semilla para reproducibilidad
folds <- vfold_cv(datos, v = 10)
# Inicializar lista para almacenar errores
errores <- numeric(length(folds$splits))
# Loop para entrenar y validar el modelo en cada fold
for (i in seq_along(folds$splits)) {
# Dividir datos
train_data <- analysis(folds$splits[[i]])  # Datos de entrenamiento
test_data <- assessment(folds$splits[[i]]) # Datos de validación
# Ajustar el modelo
modelo <- lm(Talla ~ LRM_R + Edad + Sexo, data = train_data)
# Predicciones
predicciones <- predict(modelo, newdata = test_data)
# Calcular error cuadrático medio
errores[i] <- mean((test_data$Talla - predicciones)^2)
}
# Promedio del error cuadrático medio
mean(errores)
modelo_fin <- lm(Talla ~ LRT_A + Edad + Sexo, data = datos)
predicciones_test <- predict(modelo_fin, newdata = test)
# Calcular el MSE en test
MSE_test <- mean((test$Talla - predicciones_test)^2)
MSEs <- rbind(MSEs, data.frame(Modelo = "Normal", Medida = "LRM_R", MSE = mean(errores), MSE_validacion = MSE_test)) # No se incluye pq aparentemente hay una leve homocedasticidad en los errores
#| results: hide
regfit.full <- regsubsets(Talla ~ LRM_90 + Edad + Sexo + Etnia,
datos, nbest = 1, nvmax = 10) # Mejor modelo de cada número de variables
(reg.summary <- summary(regfit.full))
# names(reg.summary)
# Crear 10 folds
set.seed(123)  # Semilla para reproducibilidad
folds <- vfold_cv(datos, v = 10)
# Inicializar lista para almacenar errores
errores <- numeric(length(folds$splits))
# Loop para entrenar y validar el modelo en cada fold
for (i in seq_along(folds$splits)) {
# Dividir datos
train_data <- analysis(folds$splits[[i]])  # Datos de entrenamiento
test_data <- assessment(folds$splits[[i]]) # Datos de validación
# Ajustar el modelo
modelo <- lm(Talla ~ LRM_90 + Edad + Sexo, data = train_data)
# Predicciones
predicciones <- predict(modelo, newdata = test_data)
# Calcular error cuadrático medio
errores[i] <- mean((test_data$Talla - predicciones)^2)
}
# Promedio del error cuadrático medio
mean(errores)
modelo_fin <- lm(Talla ~ LRT_A + Edad + Sexo, data = datos)
predicciones_test <- predict(modelo_fin, newdata = test)
# Calcular el MSE en test
MSE_test <- mean((test$Talla - predicciones_test)^2)
MSEs <- rbind(MSEs, data.frame(Modelo = "Normal", Medida = "LRM_90", MSE = mean(errores), MSE_validacion = MSE_test)) # No se incluye pq el modelo no está bien especificado
MSEs
#| results: hide
regfit.full <- regsubsets(Talla ~ LRM_R + Edad + Sexo + Etnia,
datos, nbest = 1, nvmax = 10) # Mejor modelo de cada número de variables
(reg.summary <- summary(regfit.full))
# Crear 10 folds
set.seed(123)  # Semilla para reproducibilidad
folds <- vfold_cv(datos, v = 10)
# Inicializar lista para almacenar errores
errores <- numeric(length(folds$splits))
# Loop para entrenar y validar el modelo en cada fold
for (i in seq_along(folds$splits)) {
# Dividir datos
train_data <- analysis(folds$splits[[i]])  # Datos de entrenamiento
test_data <- assessment(folds$splits[[i]]) # Datos de validación
# Ajustar el modelo
modelo <- lm(Talla ~ LRM_R + Edad + Sexo, data = train_data)
# Predicciones
predicciones <- predict(modelo, newdata = test_data)
# Calcular error cuadrático medio
errores[i] <- mean((test_data$Talla - predicciones)^2)
}
# Promedio del error cuadrático medio
mean(errores)
modelo_fin <- lm(Talla ~ LRM_R + Edad + Sexo, data = datos)
predicciones_test <- predict(modelo_fin, newdata = test)
# Calcular el MSE en test
MSE_test <- mean((test$Talla - predicciones_test)^2)
MSEs <- rbind(MSEs, data.frame(Modelo = "Normal", Medida = "LRM_R", MSE = mean(errores), MSE_validacion = MSE_test)) # No se incluye pq aparentemente hay una leve homocedasticidad en los errores
#| results: hide
regfit.full <- regsubsets(Talla ~ LRM_90 + Edad + Sexo + Etnia,
datos, nbest = 1, nvmax = 10) # Mejor modelo de cada número de variables
(reg.summary <- summary(regfit.full))
# names(reg.summary)
# Crear 10 folds
set.seed(123)  # Semilla para reproducibilidad
folds <- vfold_cv(datos, v = 10)
# Inicializar lista para almacenar errores
errores <- numeric(length(folds$splits))
# Loop para entrenar y validar el modelo en cada fold
for (i in seq_along(folds$splits)) {
# Dividir datos
train_data <- analysis(folds$splits[[i]])  # Datos de entrenamiento
test_data <- assessment(folds$splits[[i]]) # Datos de validación
# Ajustar el modelo
modelo <- lm(Talla ~ LRM_90 + Edad + Sexo, data = train_data)
# Predicciones
predicciones <- predict(modelo, newdata = test_data)
# Calcular error cuadrático medio
errores[i] <- mean((test_data$Talla - predicciones)^2)
}
# Promedio del error cuadrático medio
mean(errores)
modelo_fin <- lm(Talla ~ LRM_90 + Edad + Sexo, data = datos)
predicciones_test <- predict(modelo_fin, newdata = test)
# Calcular el MSE en test
MSE_test <- mean((test$Talla - predicciones_test)^2)
MSEs <- rbind(MSEs, data.frame(Modelo = "Normal", Medida = "LRM_90", MSE = mean(errores), MSE_validacion = MSE_test)) # No se incluye pq el modelo no está bien especificado
MSEs
model.matrix(Talla ~ LRT_CM + Edad + Sexo + Etnia, data = test)[,-1]
datos2 <- datos %>% # dataframe auxiliar para obener los id de los k-folds
mutate(index = row_number())
# Se crean los k-fols igual que en el modelo normal
set.seed(123)
folds <- vfold_cv(datos2, v = 10)
fold_id <- rep(0, nrow(datos2)) # id's de los k-folds
for(i in 1:10){
prueba = assessment(folds$splits[[i]])
ids = prueba %>% pull(index)
filas = datos2 %>% filter(index %in% ids)
fold_id[filas$index] = i
}
# Matriz diseño y variable respuesta
x <- model.matrix(Talla ~ LRT_A + Edad + Sexo + Etnia, data = datos)[,-1]
y <- datos$Talla
grid <- 10^seq(3, -3, length.out = 500) # grilla de valores lambda
# alpha = 1 se refiere a LASSO
cv.out <- cv.glmnet(x, y, alpha = 1, lambda = grid, foldid = fold_id, type.measure = "mse")
plot(cv.out) # muestra dónde se miniza la función de pérdida
# Para calcular MSE test
# Matriz de diseño para el conjunto de test
x_test <- model.matrix(Talla ~ LRT_A + Edad + Sexo + Etnia, data = test)[,-1]
y_test <- test$Talla
# Obtener el mejor lambda (el que minimiza el MSE en validación cruzada)
best_lambda <- cv.out$lambda.min
# Ajustar el modelo con el mejor lambda usando todos los datos de entrenamiento
modelo_lasso <- glmnet(x, y, alpha = 1, lambda = best_lambda)
# Hacer predicciones en test
predicciones_test <- predict(modelo_lasso, newx = x_test)
# Calcular el MSE en test
MSE_test <- mean((y_test - predicciones_test)^2)
MSEs <- rbind(MSEs, data.frame(Modelo = "LASSO", Medida = "LRT_A", MSE = min(cv.out$cvm), MSE_validacion = MSE_test))
MSEs
# Modelo nulo
gamma.reg_null <- glm(Talla ~ 1, family= Gamma(),data = datos)
# Estimacion del modelo
gamma.reg <- glm(Talla ~ LRT_A + Edad + Etnia + Sexo, family= Gamma(),data = datos)
summary(gamma.reg)
stepwise <- stepAIC(gamma.reg_null, scope = list(lower = gamma.reg_null, upper = gamma.reg), trace = TRUE, k= 2, direction="forward") # k= log(nrow(datos)) - BIC
# Estimacion del modelo
gamma.final <- glm(Talla ~ LRT_A + Edad + Sexo, family= Gamma(),data = datos)
summary(gamma.final)
# k folds
best.fit <- pred <- CV.ERRORS <- cv.errors <- NULL
set.seed(123)  # Semilla para reproducibilidad
folds <- vfold_cv(datos, v = 10)
# Inicializar lista para almacenar errores
errores <- numeric(length(folds$splits))
# Loop para entrenar y validar el modelo en cada fold
for (i in seq_along(folds$splits)) {
# Dividir datos
train_data <- analysis(folds$splits[[i]])  # Datos de entrenamiento
test_data <- assessment(folds$splits[[i]]) # Datos de validación
# Ajustar el modelo
modelo <- glm(Talla ~ LRT_A + Edad + Sexo, family= Gamma(), data = train_data)
# Predicciones
predicciones <- predict(modelo, newdata = test_data, type = "response")
# Calcular error cuadrático medio
errores[i] <- mean((test_data$Talla - predicciones)^2)
}
# Hacer predicciones en test
predicciones_test <- predict(gamma.final, newdata = test)
# Calcular el MSE en test
MSE_test <- mean((test$Talla - predicciones_test)^2)
femenino_tab <- data.frame(Variable = character(),
n = numeric(),
Minimo = numeric(),
Maximo = numeric(),
Promedio = numeric(),
DesEst = numeric(),
Mediana = numeric(),
n_val = numeric(),
Minimo_val = numeric(),
Maximo_val = numeric(),
Promedio_val = numeric(),
DesEst_val = numeric(),
Mediana_val = numeric())
femenino <- datos[datos$Sexo == "Femenino",]
femenino_test <- test[test$Sexo == "Femenino",]
femenino_tab <- rbind(femenino_tab,
data.frame(Variable = "Edad",
n = nrow(femenino),
Minimo = min(femenino$Edad),
Maximo = max(femenino$Edad),
Promedio = mean(femenino$Edad),
DesEst = sd(femenino$Edad),
Mediana = median(femenino$Edad),
n_val = nrow(femenino_test),
Minimo_val = min(femenino_test$Edad),
Maximo_val = max(femenino_test$Edad),
Promedio_val = mean(femenino_test$Edad),
DesEst_val = sd(femenino_test$Edad),
Mediana_val = median(femenino_test$Edad)))
femenino_tab <- rbind(femenino_tab,
data.frame(Variable = "Talla",
n = nrow(femenino),
Minimo = min(femenino$Talla),
Maximo = max(femenino$Talla),
Promedio = mean(femenino$Talla),
DesEst = sd(femenino$Talla),
Mediana = median(femenino$Talla),
n_val = nrow(femenino_test),
Minimo_val = min(femenino_test$Talla),
Maximo_val = max(femenino_test$Talla),
Promedio_val = mean(femenino_test$Talla),
DesEst_val = sd(femenino_test$Talla),
Mediana_val = median(femenino_test$Talla)))
femenino_tab <- rbind(femenino_tab,
data.frame(Variable = "LRT_A",
n = nrow(femenino),
Minimo = min(femenino$LRT_A),
Maximo = max(femenino$LRT_A),
Promedio = mean(femenino$LRT_A),
DesEst = sd(femenino$LRT_A),
Mediana = median(femenino$LRT_A),
n_val = nrow(femenino_test),
Minimo_val = min(femenino_test$LRT_A),
Maximo_val = max(femenino_test$LRT_A),
Promedio_val = mean(femenino_test$LRT_A),
DesEst_val = sd(femenino_test$LRT_A),
Mediana_val = median(femenino_test$LRT_A)))
femenino_tab <- rbind(femenino_tab,
data.frame(Variable = "LRT_CM",
n = nrow(femenino),
Minimo = min(femenino$LRT_CM),
Maximo = max(femenino$LRT_CM),
Promedio = mean(femenino$LRT_CM),
DesEst = sd(femenino$LRT_CM),
Mediana = median(femenino$LRT_CM),
n_val = nrow(femenino_test),
Minimo_val = min(femenino_test$LRT_CM),
Maximo_val = max(femenino_test$LRT_CM),
Promedio_val = mean(femenino_test$LRT_CM),
DesEst_val = sd(femenino_test$LRT_CM),
Mediana_val = median(femenino_test$LRT_CM)))
femenino_tab
modelos_tab <- data.frame(n = numeric(),
R2 = numeric(),
EE = numeric(),
Normalidad = numeric(),
Homocedasticidad = numeric())
modelo_femenino <- lm(Talla ~ LRT_A + Edad, data = femenino)
r2_femenino <- summary(modelo_femenino)$r.squared
ee_femenino <- sqrt(mean(residuals(modelo_femenino)^2))
normalidad_femenino <- lillie.test(residuals(modelo_femenino))$p.value
homocedasticidad_femenino <- bptest(modelo_femenino)$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(femenino),
R2 = r2_femenino,
EE = ee_femenino,
Normalidad = normalidad_femenino,
Homocedasticidad = homocedasticidad_femenino))
modelo_masculino <- lm(Talla ~ LRT_A + Edad, data = masculino)
r2_masculino <- summary(modelo_masculino)$r.squared
ee_masculino <- sqrt(mean(residuals(modelo_masculino)^2))
normalidad_masculino <- lillie.test(residuals(modelo_masculino))$p.value
homocedasticidad_masculino <- bptest(modelo_masculino)$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(masculino),
R2 = r2_masculino,
EE = ee_masculino,
Normalidad = normalidad_masculino,
Homocedasticidad = homocedasticidad_masculino))
modelos_tab
row.names(modelos_tab) <- c("Femenino", "Masculino")
modelos_tab
masculino_tab <- data.frame(Variable = character(),
n = numeric(),
Minimo = numeric(),
Maximo = numeric(),
Promedio = numeric(),
DesEst = numeric(),
Mediana = numeric(),
n_val = numeric(),
Minimo_val = numeric(),
Maximo_val = numeric(),
Promedio_val = numeric(),
DesEst_val = numeric(),
Mediana_val = numeric())
masculino <- datos[datos$Sexo == "Masculino",]
masculino_test <- test[test$Sexo == "Masculino",]
masculino_tab <- rbind(masculino_tab,
data.frame(Variable = "Edad",
n = nrow(masculino),
Minimo = min(masculino$Edad),
Maximo = max(masculino$Edad),
Promedio = mean(masculino$Edad),
DesEst = sd(masculino$Edad),
Mediana = median(masculino$Edad),
n_val = nrow(masculino_test),
Minimo_val = min(masculino_test$Edad),
Maximo_val = max(masculino_test$Edad),
Promedio_val = mean(masculino_test$Edad),
DesEst_val = sd(masculino_test$Edad),
Mediana_val = median(masculino_test$Edad)))
masculino_tab <- rbind(masculino_tab,
data.frame(Variable = "Talla",
n = nrow(masculino),
Minimo = min(masculino$Talla),
Maximo = max(masculino$Talla),
Promedio = mean(masculino$Talla),
DesEst = sd(masculino$Talla),
Mediana = median(masculino$Talla),
n_val = nrow(masculino_test),
Minimo_val = min(masculino_test$Talla),
Maximo_val = max(masculino_test$Talla),
Promedio_val = mean(masculino_test$Talla),
DesEst_val = sd(masculino_test$Talla),
Mediana_val = median(masculino_test$Talla)))
masculino_tab <- rbind(masculino_tab,
data.frame(Variable = "LRT_A",
n = nrow(masculino),
Minimo = min(masculino$LRT_A),
Maximo = max(masculino$LRT_A),
Promedio = mean(masculino$LRT_A),
DesEst = sd(masculino$LRT_A),
Mediana = median(masculino$LRT_A),
n_val = nrow(masculino_test),
Minimo_val = min(masculino_test$LRT_A),
Maximo_val = max(masculino_test$LRT_A),
Promedio_val = mean(masculino_test$LRT_A),
DesEst_val = sd(masculino_test$LRT_A),
Mediana_val = median(masculino_test$LRT_A)))
masculino_tab <- rbind(masculino_tab,
data.frame(Variable = "LRT_CM",
n = nrow(masculino),
Minimo = min(masculino$LRT_CM),
Maximo = max(masculino$LRT_CM),
Promedio = mean(masculino$LRT_CM),
DesEst = sd(masculino$LRT_CM),
Mediana = median(masculino$LRT_CM),
n_val = nrow(masculino_test),
Minimo_val = min(masculino_test$LRT_CM),
Maximo_val = max(masculino_test$LRT_CM),
Promedio_val = mean(masculino_test$LRT_CM),
DesEst_val = sd(masculino_test$LRT_CM),
Mediana_val = median(masculino_test$LRT_CM)))
masculino_tab
lillie.test(femenino$Edad)
lillie.test(femenino_test$Edad)
lillie.test(femenino$Talla)
lillie.test(femenino_test$Talla)
lillie.test(femenino$LRT_A)
lillie.test(femenino_test$LRT_A)
lillie.test(femenino$LRT_CM)
lillie.test(femenino_test$LRT_CM)
View(femenino)
lillie.test(masculino$Edad) # No normalidad
lillie.test(masculino_test$Edad) # No normalidad
lillie.test(masculino$Talla) # Normalidad
lillie.test(masculino_test$Talla) # Normalidad
lillie.test(masculino$LRT_A) # Normalidad
lillie.test(masculino_test$LRT_A) # Normalidad
lillie.test(masculino$LRT_CM) # Normalidad
lillie.test(masculino_test$LRT_CM) # Normalidad
wilcox.test(femenino$Edad, femenino_test$Edad)$p.value
t.test(femenino$Talla, femenino_test$Talla)$p.value
MSEs
sqrt(MSEs[1,4])
View(femenino_test)
modelos_tab_val <- data.frame(n = numeric(),
R2 = numeric(),
Error_Puro = numeric())
# Para mujeres
# Ajustar el modelo en el conjunto de entrenamiento
modelo <- lm(Talla ~ LRT_A + Edad + Sexo, data = femenino)
modelos_tab_val <- data.frame(n = numeric(),
R2 = numeric(),
Error_Puro = numeric())
# Para mujeres
# Ajustar el modelo en el conjunto de entrenamiento
modelo <- lm(Talla ~ LRT_A + Edad + Sexo, data = femenino)
# Para mujeres
# Ajustar el modelo en el conjunto de entrenamiento
modelo <- lm(Talla ~ LRT_A + Edad, data = femenino)
xtable(femenino_tab)
femenino_tab <- rbind(femenino_tab,
data.frame(Variable = "Edad",
n = nrow(femenino),
Minimo = min(femenino$Edad),
Maximo = max(femenino$Edad),
Promedio = mean(femenino$Edad),
DesEst = sd(femenino$Edad),
Mediana = median(femenino$Edad),
n_val = nrow(femenino_test),
Minimo_val = min(femenino_test$Edad),
Maximo_val = max(femenino_test$Edad),
Promedio_val = mean(femenino_test$Edad),
DesEst_val = sd(femenino_test$Edad),
Mediana_val = median(femenino_test$Edad),
P_valor = wilcox.test(femenino$Edad, femenino_test$Edad)$p.value))
femenino_tab |> gt()
View(datos)
View(test)
View(datos_copia)
reg <- lm(Talla ~ LRT_A + Edad + Sexo, data = datos)
(summary.reg <- summary(reg))
reg$fitted.values
# Para almacenar las estimaciones en un excel
modelo_comp <- lm(Talla ~ LRT_A + Edad + Sexo, data = datos_copia)
datos_copia$Normal_LRT_A <- modelo_comp$fitted.values
# Para almacenar las estimaciones en un excel
modelo_comp <- lm(Talla ~ LRT_CM + Edad + Sexo, data = datos_copia)
datos_copia$Normal_LRT_CM <- modelo_comp$fitted.values
# Para almacenar las estimaciones en un excel
# LRT_A
datos_copia$Benjumea_LRT_A = rep(NA,nrow(datos_copia))
# Indigena masculino
datos_copia$Benjumea_LRT_A = ifelse(datos_copia$Sexo=="Masculino" & datos_copia$Etnia == "Indigena", 82.695 + 1.745*datos_copia$LRT_A - 0.121*datos_copia$Edad, datos_copia$Benjumea_LRT_A)
# Indigena femenino
datos_copia$Benjumea_LRT_A = ifelse(datos_copia$Sexo!="Masculino" & datos_copia$Etnia == "Indigena", 90.281 + 1.436*datos_copia$LRT_A - 0.102*datos_copia$Edad, datos_copia$Benjumea_LRT_A)
# Afrodescendiente masculino
datos_copia$Benjumea_LRT_A = ifelse(datos_copia$Sexo=="Masculino" & datos_copia$Etnia == "Afrocolombiano", 79.298 + 1.855*datos_copia$LRT_A - 0.141*datos_copia$Edad, datos_copia$Benjumea_LRT_A)
# Afrodescendiente femenino
datos_copia$Benjumea_LRT_A = ifelse(datos_copia$Sexo!="Masculino" & datos_copia$Etnia == "Afrocolombiano", 76.233 + 1.767*datos_copia$LRT_A - 0.098*datos_copia$Edad, datos_copia$Benjumea_LRT_A)
# Blanco-Mestizo masculino
datos_copia$Benjumea_LRT_A = ifelse(datos_copia$Sexo=="Masculino" & datos_copia$Etnia == "Blanco-Mestizo", 75.514 + 1.883*datos_copia$LRT_A - 0.108*datos_copia$Edad, datos_copia$Benjumea_LRT_A)
# Blanco-Mestizo femenino
datos_copia$Benjumea_LRT_A = ifelse(datos_copia$Sexo!="Masculino" & datos_copia$Etnia == "Blanco-Mestizo", 86.497 + 1.553*datos_copia$LRT_A - 0.119*datos_copia$Edad, datos_copia$Benjumea_LRT_A)
# Indigena masculino
datos_copia$Benjumea_LRT_A = ifelse(datos_copia$Sexo=="Masculino" & datos_copia$Etnia == "Indigena", 82.695 + 1.745*datos_copia$LRT_A - 0.121*datos_copia$Edad, datos_copia$Benjumea_LRT_A)
# Indigena femenino
datos_copia$Benjumea_LRT_A = ifelse(datos_copia$Sexo!="Masculino" & datos_copia$Etnia == "Indigena", 90.281 + 1.436*datos_copia$LRT_A - 0.102*datos_copia$Edad, datos_copia$Benjumea_LRT_A)
# Afrodescendiente masculino
datos_copia$Benjumea_LRT_A = ifelse(datos_copia$Sexo=="Masculino" & datos_copia$Etnia == "Afrocolombiano", 79.298 + 1.855*datos_copia$LRT_A - 0.141*datos_copia$Edad, datos_copia$Benjumea_LRT_A)
# Afrodescendiente femenino
datos_copia$Benjumea_LRT_A = ifelse(datos_copia$Sexo!="Masculino" & datos_copia$Etnia == "Afrocolombiano", 76.233 + 1.767*datos_copia$LRT_A - 0.098*datos_copia$Edad, datos_copia$Benjumea_LRT_A)
# Blanco-Mestizo masculino
datos_copia$Benjumea_LRT_A = ifelse(datos_copia$Sexo=="Masculino" & datos_copia$Etnia == "Blanco-Mestizo", 75.514 + 1.883*datos_copia$LRT_A - 0.108*datos_copia$Edad, datos_copia$Benjumea_LRT_A)
# Blanco-Mestizo femenino
datos_copia$Benjumea_LRT_A = ifelse(datos_copia$Sexo!="Masculino" & datos_copia$Etnia == "Blanco-Mestizo", 86.497 + 1.553*datos_copia$LRT_A - 0.119*datos_copia$Edad, datos_copia$Benjumea_LRT_A)
```
# Para almacenar las estimaciones en un excel
# LRT_A
datos_copia$Benjumea_LRT_CM = rep(NA,nrow(datos_copia))
# Indigena masculino
datos_copia$Benjumea_LRT_CM = ifelse(datos_copia$Sexo=="Masculino" & datos_copia$Etnia == "Indigena", 82.695 + 1.745*datos_copia$LRT_CM - 0.121*datos_copia$Edad, datos_copia$Benjumea_LRT_CM)
# Indigena femenino
datos_copia$Benjumea_LRT_CM = ifelse(datos_copia$Sexo!="Masculino" & datos_copia$Etnia == "Indigena", 90.281 + 1.436*datos_copia$LRT_CM - 0.102*datos_copia$Edad, datos_copia$Benjumea_LRT_CM)
# Afrodescendiente masculino
datos_copia$Benjumea_LRT_CM = ifelse(datos_copia$Sexo=="Masculino" & datos_copia$Etnia == "Afrocolombiano", 79.298 + 1.855*datos_copia$LRT_CM - 0.141*datos_copia$Edad, datos_copia$Benjumea_LRT_CM)
# Afrodescendiente femenino
datos_copia$Benjumea_LRT_CM = ifelse(datos_copia$Sexo!="Masculino" & datos_copia$Etnia == "Afrocolombiano", 76.233 + 1.767*datos_copia$LRT_CM - 0.098*datos_copia$Edad, datos_copia$Benjumea_LRT_CM)
# Blanco-Mestizo masculino
datos_copia$Benjumea_LRT_CM = ifelse(datos_copia$Sexo=="Masculino" & datos_copia$Etnia == "Blanco-Mestizo", 75.514 + 1.883*datos_copia$LRT_CM - 0.108*datos_copia$Edad, datos_copia$Benjumea_LRT_CM)
# Blanco-Mestizo femenino
datos_copia$Benjumea_LRT_CM = ifelse(datos_copia$Sexo!="Masculino" & datos_copia$Etnia == "Blanco-Mestizo", 86.497 + 1.553*datos_copia$LRT_CM - 0.119*datos_copia$Edad, datos_copia$Benjumea_LRT_CM)
library(writexlsx)
library(writexl)
install.packages("writexl")
library(writexl)
write_xlsx(datos_copia, "Estimaciones.xlsx")
str(datos_copia)
write_xlsx(datos_copia[,-1], "Estimaciones.xlsx")
# Para almacenar las estimaciones en un excel
# LRM_R
datos_copia$Arango_LRM_R = rep(NA,nrow(datos_copia))
# Masculino
datos_copia$Arango_LRM_R = ifelse(datos_copia$Sexo=="Masculino", 119.6 + 1.121*datos_copia$LRM_R - 0.117*datos_copia$Edad, datos_copia$Arango_LRM_R)
# Femenino
datos_copia$Arango_LRM_R = ifelse(datos_copia$Sexo!="Masculino", 107.7 + 1.263*datos_copia$LRM_R - 0.159*datos_copia$Edad, datos_copia$Arango_LRM_R)
# Para almacenar las estimaciones en un excel
# LRM_90
datos_copia$Arango_LRM_90 = rep(NA,nrow(datos_copia))
# Masculino
datos_copia$Arango_LRM_90 = ifelse(datos_copia$Sexo=="Masculino", 119.6 + 1.121*datos_copia$LRM_90 - 0.117*datos_copia$Edad, datos_copia$Arango_LRM_90)
# Femenino
datos_copia$Arango_LRM_90 = ifelse(datos_copia$Sexo!="Masculino", 107.7 + 1.263*datos_copia$LRM_90 - 0.159*datos_copia$Edad, datos_copia$Arango_LRM_90)
# Escribimos el excel con las estimaciones
library(writexl)
write_xlsx(datos_copia[,-1], "Estimaciones.xlsx")
nombres <- c("Femenino", "Masculino")
cbind(nombres, modelos_tab)
