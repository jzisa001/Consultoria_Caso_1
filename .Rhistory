filter(Peso > box_peso_fm$stats[5,1] | Peso < box_peso_fm$stats[1,1]) |>
dplyr::select(-1,-2) |>
gt() |>
gtExtras::gt_theme_538() |>
tab_options(table.font.size = 9)
datos |> filter(Sexo == "Femenino") |>
filter(Peso > box_peso_fm$stats[5,1] | Peso < box_peso_fm$stats[1,1]) |>
dplyr::select(-1,-2) |>
gt() |>
gtExtras::gt_theme_538() |>
tab_options(table.font.size = 9)
datos |> filter(Sexo == "Masculino") |>
filter(Peso > box_peso_fm$stats[5,2] | Peso < box_peso_fm$stats[1,2]) |>
dplyr::select(-1,-2) |>
gt() |>
gtExtras::gt_theme_538() |>
tab_options(table.font.size = 9)
summary(datos$Talla)
summary(datos$Talla)
#| layout-ncol: 2
hist(datos$Talla, freq = FALSE, main = 'Histograma de Talla', xlab= 'Talla', ylab = 'Densidad')
lines(density(datos$Talla), col = "red")
box_talla <- boxplot(datos$Talla, main = "Boxplot de Talla")
datos[which(datos$Talla<box_talla$stats[1]|datos$Talla>box_talla$stats[5]),-c(1,2)] |> gt() |> gtExtras::gt_theme_538() |> tab_options(table.font.size = 9)
#| layout-ncol: 2
hist(datos$Talla, freq = FALSE, main = 'Histograma de Talla', xlab= 'Talla', ylab = 'Densidad')
lines(density(datos$Talla), col = "red")
box_talla <- boxplot(datos$Talla, main = "Boxplot de Talla")
datos[which(datos$Talla<box_talla$stats[1]|datos$Talla>box_talla$stats[5]),-c(1,2)] |> gt() |> gtExtras::gt_theme_538() |> tab_options(table.font.size = 9)
box_talla_fm <- boxplot(datos$Talla ~ datos$Sexo, xlab='Sexo', ylab='Talla')
box_talla_fm <- boxplot(datos$Talla ~ datos$Sexo, xlab='Sexo', ylab='Talla',
main = "Boxplot de Talla por Sexo")
(datos |> filter(Sexo == "Femenino"))[which((datos |> filter(Sexo == "Femenino"))$Talla<box_talla_fm$stats[1,1]|(datos |> filter(Sexo == "Femenino"))$Talla>box_talla_fm$stats[5,1]),-c(1,2)] |> gt() |> gtExtras::gt_theme_538() |> tab_options(table.font.size = 9)
(datos |> filter(Sexo == "Masculino"))[which((datos |> filter(Sexo == "Masculino"))$Talla<box_talla_fm$stats[1,2]|(datos |> filter(Sexo == "Masculino"))$Talla>box_talla_fm$stats[5,2]),-c(1,2)] |> gt() |> gtExtras::gt_theme_538() |> tab_options(table.font.size = 9)
(datos |> filter(Sexo == "Femenino"))[which((datos |> filter(Sexo == "Femenino"))$Talla<box_talla_fm$stats[1,1]|(datos |> filter(Sexo == "Femenino"))$Talla>box_talla_fm$stats[5,1]),-c(1,2)] |> gt() |> gtExtras::gt_theme_538() |> tab_options(table.font.size = 9)
(datos |> filter(Sexo == "Femenino"))[which((datos |> filter(Sexo == "Femenino"))$Talla<box_talla_fm$stats[1,1]|(datos |> filter(Sexo == "Femenino"))$Talla>box_talla_fm$stats[5,1]),-c(1,2)]
aa <- (datos |> filter(Sexo == "Femenino"))[which((datos |> filter(Sexo == "Femenino"))$Talla<box_talla_fm$stats[1,1]|(datos |> filter(Sexo == "Femenino"))$Talla>box_talla_fm$stats[5,1]),-c(1,2)]
aa$Talla
sort(aa$Talla)
(datos |> filter(Sexo == "Masculino"))[which((datos |> filter(Sexo == "Masculino"))$Talla<box_talla_fm$stats[1,2]|(datos |> filter(Sexo == "Masculino"))$Talla>box_talla_fm$stats[5,2]),-c(1,2)] |> gt() |> gtExtras::gt_theme_538() |> tab_options(table.font.size = 9)
summary(datos$LRT_CM)
summary(datos$LRT_CM)
#| layout-ncol: 2
hist(datos$LRT_CM, freq = FALSE, main = 'Histograma de LRT medido con cinta métrica', xlab = 'Longitud en cm', ylab = 'Densidad')
lines(density(datos$LRT_CM), col = "red")
box_LRT_CM <- boxplot(datos$LRT_CM)
box_LRT_CM <- boxplot(datos$LRT_CM, main = "Boxplot de LRT_CM")
datos[which(datos$LRT_CM<box_LRT_CM$stats[1]|datos$LRT_CM>box_LRT_CM$stats[5]),-c(1,2)] |> gt() |> gtExtras::gt_theme_538() |> tab_options(table.font.size = 9)
summary(datos$LRT_CM)
#| layout-ncol: 2
hist(datos$LRT_CM, freq = FALSE, main = 'Histograma de LRT medido con cinta métrica', xlab = 'Longitud en cm', ylab = 'Densidad')
lines(density(datos$LRT_CM), col = "red")
box_LRT_CM <- boxplot(datos$LRT_CM, main = "Boxplot de LRT_CM")
datos[which(datos$LRT_CM<box_LRT_CM$stats[1]|datos$LRT_CM>box_LRT_CM$stats[5]),-c(1,2)] |> gt() |> gtExtras::gt_theme_538() |> tab_options(table.font.size = 9)
box_LRT_CM_fm <- boxplot(datos$LRT_CM ~ datos$Sexo, xlab='Sexo', ylab='Longitud en cm')
box_LRT_CM_fm <- boxplot(datos$LRT_CM ~ datos$Sexo, xlab='Sexo', ylab='Longitud en cm',
main = "Boxplot de LTR_CM por Sexo")
(datos |> filter(Sexo == "Femenino"))[which((datos |> filter(Sexo == "Femenino"))$LRT_CM<box_LRT_CM_fm$stats[1,1]|(datos |> filter(Sexo == "Femenino"))$LRT_CM>box_LRT_CM_fm$stats[5,1]),-c(1,2)] |> gt() |> gtExtras::gt_theme_538() |> tab_options(table.font.size = 9)
(datos |> filter(Sexo == "Masculino"))[which((datos |> filter(Sexo == "Masculino"))$LRT_CM<box_LRT_CM_fm$stats[1,2]|(datos |> filter(Sexo == "Masculino"))$LRT_CM>box_LRT_CM_fm$stats[5,2]),-c(1,2)] |> gt() |> gtExtras::gt_theme_538() |> tab_options(table.font.size = 9)
summary(datos$LRT_A)
#| layout-ncol: 2
hist(datos$LRT_A, freq = FALSE, main ='Histograma de LRT con antropómetro', xlab = 'Longitud en cm', ylab = 'Densidad')
lines(density(datos$LRT_A), col = "red")
box_LRT_A <- boxplot(datos$LRT_A)
#| layout-ncol: 2
hist(datos$LRT_A, freq = FALSE, main ='Histograma de LRT con antropómetro', xlab = 'Longitud en cm', ylab = 'Densidad')
lines(density(datos$LRT_A), col = "red")
box_LRT_A <- boxplot(datos$LRT_A, main = "Boxplot de LRT_A")
datos[which(datos$LRT_A<box_LRT_A$stats[1]|datos$LRT_A>box_LRT_A$stats[5]),-c(1,2)] |> gt() |> gtExtras::gt_theme_538() |> tab_options(table.font.size = 9)
box_LRT_A_fm <- boxplot(datos$LRT_A ~ datos$Sexo, xlab = 'Sexo', ylab = 'LRT con antropómetro en cm')
box_LRT_A_fm <- boxplot(datos$LRT_A ~ datos$Sexo, xlab = 'Sexo', ylab = 'LRT con antropómetro en cm',
main = "Boxplot de LRT_A por Sexo")
(datos |> filter(Sexo == "Femenino"))[which((datos |> filter(Sexo == "Femenino"))$LRT_A<box_LRT_A_fm$stats[1,1]|(datos |> filter(Sexo == "Femenino"))$LRT_A>box_LRT_A_fm$stats[5,1]),-c(1,2)] |> gt() |> gtExtras::gt_theme_538() |> tab_options(table.font.size = 9)
box_LRT_A_fm <- boxplot(datos$LRT_A ~ datos$Sexo, xlab = 'Sexo', ylab = 'LRT con antropómetro en cm',
main = "Boxplot de LRT_A por Sexo")
datos[which(datos$LRT_A<box_LRT_A$stats[1]|datos$LRT_A>box_LRT_A$stats[5]),-c(1,2)] |> gt() |> gtExtras::gt_theme_538() |> tab_options(table.font.size = 9)
(datos |> filter(Sexo == "Femenino"))[which((datos |> filter(Sexo == "Femenino"))$LRT_A<box_LRT_A_fm$stats[1,1]|(datos |> filter(Sexo == "Femenino"))$LRT_A>box_LRT_A_fm$stats[5,1]),-c(1,2)] |> gt() |> gtExtras::gt_theme_538() |> tab_options(table.font.size = 9)
(datos |> filter(Sexo == "Masculino"))[which((datos |> filter(Sexo == "Masculino"))$LRT_A<box_LRT_A_fm$stats[1,2]|(datos |> filter(Sexo == "Masculino"))$LRT_A>box_LRT_A_fm$stats[5,2]),-c(1,2)] |> gt() |> gtExtras::gt_theme_538() |> tab_options(table.font.size = 9)
summary(datos$LRM_90)
#| layout-ncol: 2
hist(datos$LRM_90, freq = FALSE, main = 'Histograma de LRM a 90°', xlab = 'Longitud en cm', ylab = 'Densidad')
lines(density(datos$LRM_90), col = "red")
box_LRM_90<- boxplot(datos$LRM_90, main = "Boxplot de LRM_90")
datos[which(datos$LRM_90<box_LRM_90$stats[1]|datos$LRM_90>box_LRM_90$stats[5]),-c(1,2)] |> gt() |> gtExtras::gt_theme_538() |> tab_options(table.font.size = 9)
box_LRM_90_fm <- boxplot(datos$LRM_90 ~ datos$Sexo, xlab = 'Sexo', ylab = 'LRM a 90° en cm')
box_LRM_90_fm <- boxplot(datos$LRM_90 ~ datos$Sexo, xlab = 'Sexo', ylab = 'LRM a 90° en cm',
main = "Boxplot de LRM_90 por Sexo")
(datos |> filter(Sexo == "Femenino"))[which((datos |> filter(Sexo == "Femenino"))$LRM_90<box_LRM_90_fm$stats[1,1]|(datos |> filter(Sexo == "Femenino"))$LRM_90>box_LRM_90_fm$stats[5,1]),-c(1,2)] |> gt() |> gtExtras::gt_theme_538() |> tab_options(table.font.size = 9)
(datos |> filter(Sexo == "Masculino"))[which((datos |> filter(Sexo == "Masculino"))$LRM_90<box_LRM_90_fm$stats[1,2]|(datos |> filter(Sexo == "Masculino"))$LRM_90>box_LRM_90_fm$stats[5,2]),-c(1,2)] |> gt() |> gtExtras::gt_theme_538() |> tab_options(table.font.size = 9)
summary(datos$LRM_R)
#| layout-ncol: 2
hist(datos$LRM_R, freq = FALSE, main = 'Histograma de LRM recta', xlab = 'Longitud en cm', ylab='Densidad')
lines(density(datos$LRM_R), col = "red")
box_LRM_R<- boxplot(datos$LRM_R, main = "Boxplot de LRM_R")
datos[which(datos$LRM_R<box_LRM_R$stats[1]|datos$LRM_R>box_LRM_R$stats[5]),-c(1,2)] |> gt() |> gtExtras::gt_theme_538() |> tab_options(table.font.size = 9)
box_LRM_R_fm <- boxplot(datos$LRM_R ~ datos$Sexo, xlab = 'Sexo', ylab = 'LRM recta en cm',
main = "Boxplot de LRT_R por Sexo")
(datos |> filter(Sexo == "Femenino"))[which((datos |> filter(Sexo == "Femenino"))$LRM_R<box_LRM_R_fm$stats[1,1]|(datos |> filter(Sexo == "Femenino"))$LRM_R>box_LRM_R_fm$stats[5,1]),-c(1,2)] |> gt() |> gtExtras::gt_theme_538() |> tab_options(table.font.size = 9)
(datos |> filter(Sexo == "Masculino"))[which((datos |> filter(Sexo == "Masculino"))$LRM_R<box_LRM_R_fm$stats[1,2]|(datos |> filter(Sexo == "Masculino"))$LRM_R>box_LRM_R_fm$stats[5,2]),-c(1,2)] |> gt() |> gtExtras::gt_theme_538() |> tab_options(table.font.size = 9)
ggpairs(
datos[,-c(1:5, 7)],  # Tu subconjunto de datos
lower = list(continuous = wrap("smooth", method = "lm", color = "lightblue")),  # Línea de regresión en rojo
title = "Matriz de correlaciones"
)
#| layout-ncol: 2
ggplot(datos, aes(x = Sexo, y = Talla)) +
geom_boxplot() +
labs(title = "Distribución de la Talla por Sexo",
x = "Sexo",
y = "Talla") +
theme_minimal()
ggplot(datos, aes(x = Etnia, y = Talla)) +
geom_boxplot() +
labs(title = "Distribución de la Talla por Etnia",
x = "Etnia",
y = "Talla") +
theme_minimal()
# Librerias
library(readxl)
library(tidyverse)
library(nortest)
library(dplyr)
library(ggplot2)
library(GGally) # para la funcion ggpairs
library(gt)
library(gtExtras)
library(moments)
library(leaps)
library(MASS)
library(lmtest)
library(car)
library(BSDA) # Test del signo
library(glmnet)
library(glmtoolbox)
library(MASS)
library(rsample)
library(lawstat)
datos <- read_excel("Datos/Corregida - COMPILADO DATOS COMUNIDAD DE CUIDADO Y CENTRO DÍA.xlsx",
range = "B2:AN561", col_types = c("date",
"skip", "text", "text", "text", "skip",
"text", "numeric", "text", "skip",
"skip", "skip", "skip", "numeric",
"skip", "skip", "skip", "skip", "numeric",
"skip", "skip", "skip", "skip", "numeric",
"skip", "skip", "skip", "skip", "numeric",
"skip", "skip", "skip", "skip", "numeric",
"skip", "skip", "skip", "skip", "numeric"))
colnames(datos) <- c("Fecha", "Localidad", "Programa", "Unidad_atencion",
"Sexo", "Edad", "Etnia", "Peso", "Talla",
"LRT_CM","LRT_A", "LRM_90","LRM_R")
datos$Sexo <- as.factor(datos$Sexo)
datos$Etnia <- as.factor(datos$Etnia)
datos <- datos[-which(datos$Edad<60),] # >60
datos <- datos |> filter(!(abs(LRT_A-LRT_CM) > 3 | abs(LRM_90-LRM_R) > 3))
datos <- datos |> as.data.frame()
# Librerias
library(readxl)
library(tidyverse)
library(nortest)
library(dplyr)
library(ggplot2)
library(GGally) # para la funcion ggpairs
library(gt)
library(gtExtras)
library(moments)
library(leaps)
library(MASS)
library(lmtest)
library(car)
library(BSDA) # Test del signo
library(glmnet)
library(glmtoolbox)
library(MASS)
library(rsample)
library(lawstat)
datos <- read_excel("Datos/Corregida - COMPILADO DATOS COMUNIDAD DE CUIDADO Y CENTRO DÍA.xlsx",
range = "B2:AN561", col_types = c("date",
"skip", "text", "text", "text", "skip",
"text", "numeric", "text", "skip",
"skip", "skip", "skip", "numeric",
"skip", "skip", "skip", "skip", "numeric",
"skip", "skip", "skip", "skip", "numeric",
"skip", "skip", "skip", "skip", "numeric",
"skip", "skip", "skip", "skip", "numeric",
"skip", "skip", "skip", "skip", "numeric"))
colnames(datos) <- c("Fecha", "Localidad", "Programa", "Unidad_atencion",
"Sexo", "Edad", "Etnia", "Peso", "Talla",
"LRT_CM","LRT_A", "LRM_90","LRM_R")
datos$Sexo <- as.factor(datos$Sexo)
datos$Etnia <- as.factor(datos$Etnia)
datos <- datos[-which(datos$Edad<60),] # >60
datos <- datos |> filter(!(abs(LRT_A-LRT_CM) > 3 | abs(LRM_90-LRM_R) > 3))
datos <- datos |> as.data.frame()
axis(1, at = c(1, 2), labels = c("Cinta Métrica", "Antropómetro"),
main = "Boxplot Longitud rodilla - talón por tipo de medición")
boxplot(data.frame(datos$LRT_CM, datos$LRT_A), ylab = 'Longitud Rodilla - Talón (cm)', xgap.axis = c("Cinta métrica","Antropómetro"), xaxt = "n")
axis(1, at = c(1, 2), labels = c("Cinta Métrica", "Antropómetro"),
main = "Boxplot Longitud rodilla - talón por tipo de medición")
boxplot(data.frame(datos$LRT_CM, datos$LRT_A), ylab = 'Longitud Rodilla - Talón (cm)', xgap.axis = c("Cinta métrica","Antropómetro"), xaxt = "n", ,
main = "Boxplot Longitud rodilla - talón por tipo de medición")
boxplot(data.frame(datos$LRT_CM, datos$LRT_A), ylab = 'Longitud Rodilla - Talón (cm)', xgap.axis = c("Cinta métrica","Antropómetro"), xaxt = "n",
main = "Boxplot Longitud rodilla - talón por tipo de medición")
axis(1, at = c(1, 2), labels = c("Cinta Métrica", "Antropómetro"))
LRT_dif <- datos$LRT_CM - datos$LRT_A
hist(LRT_dif, freq = FALSE, main = 'Histograma de las la diferencia de mediciones LRT', ylab = 'Densidad', xlab = 'Diferenencia (cm)')
#| layout-ncol: 2
LRT_dif <- datos$LRT_CM - datos$LRT_A
hist(LRT_dif, freq = FALSE, main = 'Histograma de las la diferencia de mediciones LRT_CM y LRT_A', ylab = 'Densidad', xlab = 'Diferencia (cm)')
lines(density(LRT_dif), col = "red")
abline(v = median(LRT_dif, na.rm = TRUE), col = "red", lty = 2)
abline(v = mean(LRT_dif, na.rm = TRUE), col = "red", lty = 2)
#| layout-ncol: 2
LRT_dif <- datos$LRT_CM - datos$LRT_A
hist(LRT_dif, freq = FALSE, main = 'Histograma de las la diferencia de mediciones LRT_CM y LRT_A', ylab = 'Densidad', xlab = 'Diferencia (cm)')
lines(density(LRT_dif), col = "red")
abline(v = mean(LRT_dif, na.rm = TRUE), col = "red", lty = 2)
boxplot_dif <- boxplot(LRT_dif)
hist(LRT_dif, freq = FALSE, main = 'Histograma de las la diferencias LRT_CM - LRT_A', ylab = 'Densidad', xlab = 'Diferencia (cm)')
#| layout-ncol: 2
LRT_dif <- datos$LRT_CM - datos$LRT_A
hist(LRT_dif, freq = FALSE, main = 'Histograma de las la diferencias LRT_CM - LRT_A', ylab = 'Densidad', xlab = 'Diferencia (cm)')
lines(density(LRT_dif), col = "red")
abline(v = mean(LRT_dif, na.rm = TRUE), col = "red", lty = 2)
boxplot_dif <- boxplot(LRT_dif, main = "Boxplot de las diferencias LRT_CM - LRT_A")
LRT_dif
sort(LRT_dif)
atipicos <- datos[which(LRT_dif %in% boxplot_dif$out),]
atipicos
datos[which(LRT_dif %in% boxplot_dif$out),]
dim(datos[which(LRT_dif %in% boxplot_dif$out),])
boxplot_dif$out
length(boxplot_dif$out)
atipicos <- datos[which(LRT_dif %in% boxplot_dif$out),]
atipicos <- datos[which(LRT_dif %in% boxplot_dif$out),]
?shapiro.test
?lillie.test
#| layout-ncol: 2
shapiro.test(LRT_dif)
lillie.test(LRT_dif)
?symmetry.test
symmetry.test(LRT_dif, boot = FALSE)
t_test <- asimetria / sqrt(6 / length(LRT_dif))  # Estadístico t
asimetria <- moments::skewness(LRT_dif)
t_test <- asimetria / sqrt(6 / length(LRT_dif))  # Estadístico t
p_value <- 2 * (1 - pt(abs(t_test), df = length(LRT_dif) - 1))
p_value # parece que no hay simetria, entonces no se puede aplicar Wilcoxon
wilcox.test(LRT_dif, mu = 0, alternative = "two.sided")
wilcox.test(log(LRT_dif), mu = 0, alternative = "two.sided")
wilcox.test(sqrt(LRT_dif), mu = 0, alternative = "two.sided")
wilcox.test(1/(LRT_dif), mu = 0, alternative = "two.sided")
asimetria <- moments::skewness(LRT_dif)
t_test <- asimetria / sqrt(6 / length(LRT_dif))  # Estadístico t
p_value <- 2 * (1 - pt(abs(t_test), df = length(LRT_dif) - 1))
p_value # parece que no hay simetria, entonces no se puede aplicar Wilcoxon
asimetria <- moments::skewness(LRT_dif)
t_test <- asimetria / sqrt(6 / length(LRT_dif))
asimetria <- moments::skewness(LRT_dif)
t_test <- asimetria / sqrt(6 / length(LRT_dif))
p_value <- 2 * (1 - pt(abs(t_test), df = length(LRT_dif) - 1))
p_value
asimetria <- moments::skewness(LRT_dif)
t_test <- asimetria / sqrt(6 / length(LRT_dif))
p_value <- 2 * (1 - pt(abs(t_test), df = length(LRT_dif) - 1))
p_value
paste("p-valor asimetría",p_value)
paste("p-valor asimetría:",p_value)
asimetria <- moments::skewness(LRT_dif)
t_test <- asimetria / sqrt(6 / length(LRT_dif))
p_value <- 2 * (1 - pt(abs(t_test), df = length(LRT_dif) - 1))
paste("p-valor simetría:",p_value)
paste("p-valor asimetría:",p_value)
?wilcox.test
SIGN.test(LRT_dif, md = 0, alternative = "two.sided")
wilcox.test(LRT_dif)
wilcox.test(LRT_dif~1)
wilcox.test(LRT_dif, exact = TRUE)
wilcox.test(LRT_dif, conf.int = TRUE)
wilcox.test(LRT_dif, alternative = "two.sided", conf.int = TRUE)
wilcox.test(LRT_dif, alternative = "two.sided", conf.int = TRUE, paired = TRUE)
wilcox.test(LRT_dif, alternative = "two.sided", conf.int = TRUE)
# Cargar el paquete necesario
# install.packages("BSDA") # Si no lo tienes
library(BSDA)
# Usar la mediana observada de tus datos LRT_dif
mediana_observada <- median(LRT_dif)
# Parámetros de simulación
n <- length(LRT_dif)  # Tamaño de muestra (número de diferencias)
n_simulaciones <- 10000 # Número de simulaciones
# Función para realizar las simulaciones y calcular la potencia del Test del Signo
potencia_signo <- function(n, n_simulaciones, mediana_diferencia) {
rechazos <- 0
for (i in 1:n_simulaciones) {
# Generar diferencias aleatorias con mediana igual a la mediana observada
diferencias_simuladas <- rnorm(n, mean = mediana_diferencia, sd = 1)
# Realizar el Test del Signo
resultado <- SIGN.test(diferencias_simuladas, md = 0)
# Contar los rechazos (si el p-valor es menor que 0.05)
if (resultado$p.value < 0.05) {
rechazos <- rechazos + 1
}
}
# Calcular la potencia
potencia <- rechazos / n_simulaciones
return(potencia)
}
# Estimar la potencia usando la mediana observada de las diferencias en LRT_dif
potencia_signo_resultado <- potencia_signo(n = n, n_simulaciones = n_simulaciones, mediana_diferencia = mediana_observada)
potencia_signo_resultado
potencia_signo_resultado
# Función para realizar las simulaciones y calcular la potencia del Test de Wilcoxon
potencia_wilcoxon <- function(n, n_simulaciones, mediana_diferencia) {
rechazos <- 0
for (i in 1:n_simulaciones) {
# Generar diferencias aleatorias con mediana igual a la mediana observada
diferencias_simuladas <- rnorm(n, mean = mediana_diferencia, sd = 1)
# Realizar el Test de Wilcoxon
resultado <- wilcox.test(diferencias_simuladas, mu = 0, paired = TRUE)
# Contar los rechazos (si el p-valor es menor que 0.05)
if (resultado$p.value < 0.05) {
rechazos <- rechazos + 1
}
}
# Calcular la potencia
potencia <- rechazos / n_simulaciones
return(potencia)
}
# Estimar la potencia usando la mediana observada de las diferencias en LRT_dif
potencia_wilcoxon_resultado <- potencia_wilcoxon(n = n, n_simulaciones = n_simulaciones, mediana_diferencia = mediana_observada)
# Función para realizar las simulaciones y calcular la potencia del Test de Wilcoxon
potencia_wilcoxon <- function(n, n_simulaciones, mediana_diferencia) {
rechazos <- 0
for (i in 1:n_simulaciones) {
# Generar diferencias aleatorias con mediana igual a la mediana observada
diferencias_simuladas <- rnorm(n, mean = mediana_diferencia, sd = 1)
# Realizar el Test de Wilcoxon
resultado <- wilcox.test(diferencias_simuladas, mu = 0)
# Contar los rechazos (si el p-valor es menor que 0.05)
if (resultado$p.value < 0.05) {
rechazos <- rechazos + 1
}
}
# Calcular la potencia
potencia <- rechazos / n_simulaciones
return(potencia)
}
# Estimar la potencia usando la mediana observada de las diferencias en LRT_dif
potencia_wilcoxon_resultado <- potencia_wilcoxon(n = n, n_simulaciones = n_simulaciones, mediana_diferencia = mediana_observada)
potencia_wilcoxon_resultado
n
wilcox.test(LRT_dif, alternative = "two.sided", conf.int = TRUE)
LRT_dif
sort(LRT_dif)
LRT_dif[which(boxplot_dif$out)]
LRT_dif[which(LRT_dif %in% boxplot_dif$out)]
LRT_dif[!which(LRT_dif %in% boxplot_dif$out)]
LRT_dif[-which(LRT_dif %in% boxplot_dif$out)]
sina <- LRT_dif[-which(LRT_dif %in% boxplot_dif$out)]
wilcox.test(sina, alternative = "two.sided", conf.int = TRUE)
boxplot(sina)
skewness(sina)
asimetria <- moments::skewness(sina)
t_test <- asimetria / sqrt(6 / length(LRT_dif))  # Estadístico t
p_value <- 2 * (1 - pt(abs(t_test), df = length(LRT_dif) - 1))
p_value
# Chunk 1
# Librerias
library(readxl)
library(tidyverse)
library(nortest)
library(dplyr)
library(ggplot2)
library(GGally) # para la funcion ggpairs
library(gt)
library(gtExtras)
library(moments)
library(leaps)
library(MASS)
library(lmtest)
library(car)
library(BSDA) # Test del signo
library(glmnet)
library(glmtoolbox)
library(MASS)
library(rsample)
library(lawstat)
# Chunk 2
datos <- read_excel("Datos/Corregida - COMPILADO DATOS COMUNIDAD DE CUIDADO Y CENTRO DÍA.xlsx",
range = "B2:AN561", col_types = c("date",
"skip", "text", "text", "text", "skip",
"text", "numeric", "text", "skip",
"skip", "skip", "skip", "numeric",
"skip", "skip", "skip", "skip", "numeric",
"skip", "skip", "skip", "skip", "numeric",
"skip", "skip", "skip", "skip", "numeric",
"skip", "skip", "skip", "skip", "numeric",
"skip", "skip", "skip", "skip", "numeric"))
colnames(datos) <- c("Fecha", "Localidad", "Programa", "Unidad_atencion",
"Sexo", "Edad", "Etnia", "Peso", "Talla",
"LRT_CM","LRT_A", "LRM_90","LRM_R")
datos$Sexo <- as.factor(datos$Sexo)
datos$Etnia <- as.factor(datos$Etnia)
datos <- datos[-which(datos$Edad<60),] # >60
datos <- datos |> filter(!(abs(LRT_A-LRT_CM) > 3 | abs(LRM_90-LRM_R) > 3))
datos <- datos |> as.data.frame()
boxplot(data.frame(datos$LRT_CM, datos$LRT_A), ylab = 'Longitud Rodilla - Talón (cm)', xgap.axis = c("Cinta métrica","Antropómetro"), xaxt = "n",
main = "Boxplot Longitud rodilla - talón por tipo de medición")
axis(1, at = c(1, 2), labels = c("Cinta Métrica", "Antropómetro"))
#| layout-ncol: 3
LRT_dif <- datos$LRT_CM - datos$LRT_A
hist(LRT_dif, freq = FALSE, main = 'Histograma de las la diferencias LRT_CM - LRT_A', ylab = 'Densidad', xlab = 'Diferencia (cm)')
lines(density(LRT_dif), col = "red")
abline(v = mean(LRT_dif, na.rm = TRUE), col = "red", lty = 2)
boxplot_dif <- boxplot(LRT_dif, main = "Boxplot de las diferencias LRT_CM - LRT_A")
qqnorm(LRT_dif, main = "Q-Q plot de las diferencias")
qqline(LRT_dif, col = "red")
#| layout-ncol: 2
shapiro.test(LRT_dif)
lillie.test(LRT_dif)
wilcox.test(LRT_dif, alternative = "two.sided", conf.int = TRUE)
wilcox.test(LRT_dif, alternative = "two.sided", conf.int = TRUE, mu = 1)
wilcox.test(LRT_dif, alternative = "two.sided", conf.int = TRUE, mu = 2)
wilcox.test(LRT_dif, alternative = "two.sided", conf.int = TRUE, mu = 1.5)
sina <- LRT_dif[-which(LRT_dif %in% boxplot_dif$out)]
lillie.test(sina)
ks.test(sina)
shapiro.test(sina)
t.test()sina
t.test(sina)
hist(sina)
line(dentisty(sina))
lines(dentisty(sina))
lines(dentity(sina))
lines(density(sina))
hist(sina, freq = FALSE)
lines(density(sina))
?ad
?ad.test(sina)
ad.test(sina)
ad.test(rnorm(100, mean = 5, sd = 3))
ad.test(runif(100, min = 2, max = 4))
ee <- LRT_dif[-which(LRT_dif > 0)]
lillie.test(ee)
shapiro.test(ee)
boxplot(ee)
boxplot(LRT_dif)
wilcox.test(datos$LRT_CM, datos$LRT_A, paired = TRUE, alternative = "two.sided", conf.int = TRUE)
jarque.test(LRT_dif)
jarque.test(sina)
skewness(LRT_dif)
moments::skewness(LRT_dif)
moments::skewness(rnorm(100))
moments::skewness(rnorm(10))
moments::skewness(rnorm(100000))
moments::skewness(rnorm(100000))
moments::skewness(rnorm(100000))
moments::skewness(rnorm(100000))
moments::skewness(rnorm(100000))
moments::skewness(rnorm(100000))
moments::skewness()
moments::skewness(asin)
moments::skewness(sina)
wilcox.test(datos$LRT_CM, datos$LRT_A, paired = TRUE, alternative = "two.sided", conf.int = TRUE)
a
#| layout-ncol: 2
hombres <- datos[datos$Sexo == "Masculino",]
LRT_dif <- hombres$LRT_CM - hombres$LRT_A
hist(LRT_dif, freq = FALSE, main = 'Diferencia de mediciones LRT (hombres)', ylab = 'Densidad', xlab = 'Diferenencia (cm)')
lines(density(LRT_dif), col = "red")
abline(v = median(LRT_dif, na.rm = TRUE), col = "red", lty = 2)
boxplot(LRT_dif)
#| layout-ncol: 2
shapiro.test(LRT_dif)
lillie.test(LRT_dif)
wilcox.test(hombres$LRT_CM, hombres$LRT_A, paired = TRUE, alternative = "two.sided", conf.int = TRUE)
# Diferencias CM y A
mujeres <- datos[datos$Sexo == "Femenino",]
LRT_dif <- mujeres$LRT_CM - mujeres$LRT_A
hist(LRT_dif, freq = FALSE, main = 'Diferencia de mediciones LRT (mujeres)', ylab = 'Densidad', xlab = 'Diferenencia (cm)')
lines(density(LRT_dif), col = "red")
abline(v = median(LRT_dif, na.rm = TRUE), col = "red", lty = 2)
boxplot(LRT_dif) # hay muchos outliers
# Pruebas de normalidad
## Test Shapiro-Wilk
shapiro.test(LRT_dif) # No se tiene normalidad en la edad según el test de Shapiro-Wilks
## Test lilliefors
lillie.test(LRT_dif) # No se tiene normalidad en la edad según el test de Lilliefors
table(LRT_dif)
sort(LRT_dif)
#| layout-ncol: 3
LRT_dif <- datos$LRT_CM - datos$LRT_A
sort(LRT_dif)
#| layout-ncol: 3
LRT_dif <- datos$LRT_CM - datos$LRT_A
hist(LRT_dif, freq = FALSE, main = 'Histograma de las la diferencias LRT_CM - LRT_A', ylab = 'Densidad', xlab = 'Diferencia (cm)')
lines(density(LRT_dif), col = "red")
abline(v = mean(LRT_dif, na.rm = TRUE), col = "red", lty = 2)
boxplot_dif <- boxplot(LRT_dif, main = "Boxplot de las diferencias LRT_CM - LRT_A")
qqnorm(LRT_dif, main = "Q-Q plot de las diferencias")
qqline(LRT_dif, col = "red")
#| layout-ncol: 2
shapiro.test(LRT_dif)
lillie.test(LRT_dif)
wilcox.test(datos$LRT_CM, datos$LRT_A, paired = TRUE, alternative = "left", conf.int = TRUE)
wilcox.test(datos$LRT_CM, datos$LRT_A, paired = TRUE, alternative = "less", conf.int = TRUE)
wilcox.test(datos$LRT_CM, datos$LRT_A, paired = TRUE, alternative = "greater", conf.int = TRUE)
wilcox.test(datos$LRT_CM, datos$LRT_A, paired = TRUE, alternative = "less", conf.int = TRUE)
ad.test(LRT_dif)
jarque.test(LRT_dif)
ad.test(sina)
jarque.test(sina)
?ad.test
von.misses()
