n = nrow(masculino),
Minimo = min(masculino$LRT_CM),
Maximo = max(masculino$LRT_CM),
Promedio = mean(masculino$LRT_CM),
DesEst = sd(masculino$LRT_CM),
Mediana = median(masculino$LRT_CM),
n_val = nrow(masculino_test),
Minimo_val = min(masculino_test$LRT_CM),
Maximo_val = max(masculino_test$LRT_CM),
Promedio_val = mean(masculino_test$LRT_CM),
DesEst_val = sd(masculino_test$LRT_CM),
Mediana_val = median(masculino_test$LRT_CM),
P_valor = t.test(masculino$LRT_CM, masculino_test$LRT_CM)$p.value))
masculino_tab <- rbind(masculino_tab,
data.frame(Variable = "LRM_R",
n = nrow(masculino),
Minimo = min(masculino$LRM_R),
Maximo = max(masculino$LRM_R),
Promedio = mean(masculino$LRM_R),
DesEst = sd(masculino$LRM_R),
Mediana = median(masculino$LRM_R),
n_val = nrow(masculino_test),
Minimo_val = min(masculino_test$LRM_R),
Maximo_val = max(masculino_test$LRM_R),
Promedio_val = mean(masculino_test$LRM_R),
DesEst_val = sd(masculino_test$LRM_R),
Mediana_val = median(masculino_test$LRM_R),
P_valor = t.test(masculino$LRM_R, masculino_test$LRM_R)$p.value))
masculino_tab <- rbind(masculino_tab,
data.frame(Variable = "LRM_90",
n = nrow(masculino),
Minimo = min(masculino$LRM_90),
Maximo = max(masculino$LRM_90),
Promedio = mean(masculino$LRM_90),
DesEst = sd(masculino$LRM_90),
Mediana = median(masculino$LRM_90),
n_val = nrow(masculino_test),
Minimo_val = min(masculino_test$LRM_90),
Maximo_val = max(masculino_test$LRM_90),
Promedio_val = mean(masculino_test$LRM_90),
DesEst_val = sd(masculino_test$LRM_90),
Mediana_val = median(masculino_test$LRM_90),
P_valor = t.test(masculino$LRM_90, masculino_test$LRM_90)$p.value))
masculino_tab |> gt()
View(masculino)
View(masculino_test)
test2 <- estimaciones[-indices, ]   # 20% validación
View(test)
View(test2)
femenino_test2 <- test2[test2$Sexo == "Femenino",]
View(femenino_test2)
train2 <- estimaciones[indices, ]
femenino2 <- train2[train2$Sexo == "Femenino",]
# R cuadrado
SSE <- sum((femenino2$Talla - femenino2$Benjumea_LRT_A)^2)  # Suma de errores cuadráticos
SST <- sum((femenino2$Talla - mean(femenino2$Talla))^2)  # Suma total de cuadrados
r2_femenino <- 1 - (SSE / SST)
# Error estandar
ee_femenino <- sqrt(mean(femenino2$Talla - femenino2$Benjumea_LRT_A)^2))
# Error estandar
ee_femenino <- sqrt(mean((femenino2$Talla - femenino2$Benjumea_LRT_A)^2))
# Prueba de normalidad sobre los residuales
normalidad_femenino <- lillie.test((femenino2$Talla - femenino2$Benjumea_LRT_A))$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_femenino <- bptest((femenino2$Talla - femenino2$Benjumea_LRT_A))$p.value
# Prueba de homocedasticidad sobre los residuales
residuos <- femenino2$Talla - femenino2$Benjumea_LRT_A
homocedasticidad_femenino <- bptest(lm(residuos ~ LRT_A + Edad + Etnia, data = femenino2))$p.value
# Masculino
masculino2 <- train2[train2$Sexo == "Masculino",]
modelos_tab <- data.frame(n = numeric(),
R2 = numeric(),
EE = numeric(),
Normalidad = numeric(),
Homocedasticidad = numeric())
# Femenino
train2 <- estimaciones[indices, ]
femenino2 <- train2[train2$Sexo == "Femenino",]
# Residuales
residuos <- femenino2$Talla - femenino2$Benjumea_LRT_A
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
SST <- sum((femenino2$Talla - mean(femenino2$Talla))^2)  # Suma total de cuadrados
r2_femenino <- 1 - (SSE / SST)
# Error estandar
ee_femenino <- sqrt(mean(residuos^2))
# Prueba de normalidad sobre los residuales
normalidad_femenino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_femenino <- bptest(lm(residuos ~ LRT_A + Edad + Etnia, data = femenino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(femenino),
R2 = r2_femenino,
EE = ee_femenino,
Normalidad = normalidad_femenino,
Homocedasticidad = homocedasticidad_femenino))
# Masculino
masculino2 <- train2[train2$Sexo == "Masculino",]
# Residuales
residuos <- masculino2$Talla - masculino2$Benjumea_LRT_A
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
SST <- sum((masculino2$Talla - mean(masculino2$Talla))^2)  # Suma total de cuadrados
r2_masculino <- 1 - (SSE / SST)
# Error estandar
ee_masculino <- sqrt(mean(residuos^2))
# Prueba de normalidad sobre los residuales
normalidad_masculino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_masculino <- bptest(lm(residuos ~ LRT_A + Edad + Etnia, data = masculino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(masculino),
R2 = r2_masculino,
EE = ee_masculino,
Normalidad = normalidad_masculino,
Homocedasticidad = homocedasticidad_masculino))
nombres <- c("Femenino", "Masculino")
modelos_tab <- cbind(nombres, modelos_tab)
modelos_tab |> gt()
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
# R cuadrado
SSE <- sum(residuos^2, na.rm = TRUE)  # Suma de errores cuadráticos
SST <- sum((masculino2$Talla - mean(masculino2$Talla))^2)  # Suma total de cuadrados
r2_masculino <- 1 - (SSE / SST)
# Error estandar
ee_masculino <- sqrt(mean(residuos^2))
# Prueba de normalidad sobre los residuales
normalidad_masculino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_masculino <- bptest(lm(residuos ~ LRT_A + Edad + Etnia, data = masculino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(masculino),
R2 = r2_masculino,
EE = ee_masculino,
Normalidad = normalidad_masculino,
Homocedasticidad = homocedasticidad_masculino))
nombres <- c("Femenino", "Masculino")
modelos_tab <- cbind(nombres, modelos_tab)
modelos_tab |> gt()
modelos_tab <- data.frame(n = numeric(),
R2 = numeric(),
EE = numeric(),
Normalidad = numeric(),
Homocedasticidad = numeric())
# Femenino
train2 <- estimaciones[indices, ]
femenino2 <- train2[train2$Sexo == "Femenino",]
# Residuales
residuos <- femenino2$Talla - femenino2$Benjumea_LRT_A
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
SST <- sum((femenino2$Talla - mean(femenino2$Talla))^2)  # Suma total de cuadrados
r2_femenino <- 1 - (SSE / SST)
# Error estandar
ee_femenino <- sqrt(mean(residuos^2))
# Prueba de normalidad sobre los residuales
normalidad_femenino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_femenino <- bptest(lm(residuos ~ LRT_A + Edad + Etnia, data = femenino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(femenino),
R2 = r2_femenino,
EE = ee_femenino,
Normalidad = normalidad_femenino,
Homocedasticidad = homocedasticidad_femenino))
# Masculino
masculino2 <- train2[train2$Sexo == "Masculino",]
# Residuales
residuos <- masculino2$Talla - masculino2$Benjumea_LRT_A
# R cuadrado
SSE <- sum(residuos^2, na.rm = TRUE)  # Suma de errores cuadráticos
SST <- sum((masculino2$Talla - mean(masculino2$Talla))^2)  # Suma total de cuadrados
r2_masculino <- 1 - (SSE / SST)
# Error estandar
ee_masculino <- sqrt(mean(residuos^2))
# Prueba de normalidad sobre los residuales
normalidad_masculino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_masculino <- bptest(lm(residuos ~ LRT_A + Edad + Etnia, data = masculino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(masculino),
R2 = r2_masculino,
EE = ee_masculino,
Normalidad = normalidad_masculino,
Homocedasticidad = homocedasticidad_masculino))
nombres <- c("Femenino", "Masculino")
modelos_tab <- cbind(nombres, modelos_tab)
modelos_tab |> gt()
# Error estandar
ee_masculino <- sqrt(mean(residuos^2, na.rm = TRUE))
# Prueba de normalidad sobre los residuales
normalidad_masculino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_masculino <- bptest(lm(residuos ~ LRT_A + Edad + Etnia, data = masculino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(masculino),
R2 = r2_masculino,
EE = ee_masculino,
Normalidad = normalidad_masculino,
Homocedasticidad = homocedasticidad_masculino))
nombres <- c("Femenino", "Masculino")
modelos_tab <- cbind(nombres, modelos_tab)
modelos_tab |> gt()
modelos_tab <- data.frame(n = numeric(),
R2 = numeric(),
EE = numeric(),
Normalidad = numeric(),
Homocedasticidad = numeric())
# Femenino
train2 <- estimaciones[indices, ]
femenino2 <- train2[train2$Sexo == "Femenino",]
# Residuales
residuos <- femenino2$Talla - femenino2$Benjumea_LRT_A
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
SST <- sum((femenino2$Talla - mean(femenino2$Talla))^2)  # Suma total de cuadrados
r2_femenino <- 1 - (SSE / SST)
# Error estandar
ee_femenino <- sqrt(mean(residuos^2))
# Prueba de normalidad sobre los residuales
normalidad_femenino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_femenino <- bptest(lm(residuos ~ LRT_A + Edad + Etnia, data = femenino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(femenino),
R2 = r2_femenino,
EE = ee_femenino,
Normalidad = normalidad_femenino,
Homocedasticidad = homocedasticidad_femenino))
# Masculino
masculino2 <- train2[train2$Sexo == "Masculino",]
# Residuales
residuos <- masculino2$Talla - masculino2$Benjumea_LRT_A
# R cuadrado
SSE <- sum(residuos^2, na.rm = TRUE)  # Suma de errores cuadráticos
SST <- sum((masculino2$Talla - mean(masculino2$Talla))^2)  # Suma total de cuadrados
r2_masculino <- 1 - (SSE / SST)
# Error estandar
ee_masculino <- sqrt(mean(residuos^2, na.rm = TRUE))
# Prueba de normalidad sobre los residuales
normalidad_masculino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_masculino <- bptest(lm(residuos ~ LRT_A + Edad + Etnia, data = masculino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(masculino),
R2 = r2_masculino,
EE = ee_masculino,
Normalidad = normalidad_masculino,
Homocedasticidad = homocedasticidad_masculino))
nombres <- c("Femenino", "Masculino")
modelos_tab <- cbind(nombres, modelos_tab)
modelos_tab |> gt()
modelos_tab <- data.frame(n = numeric(),
R2 = numeric(),
EE = numeric(),
Normalidad = numeric(),
Homocedasticidad = numeric())
# Femenino
train2 <- estimaciones[indices, ]
femenino2 <- train2[train2$Sexo == "Femenino",]
# Residuales
residuos <- femenino2$Talla - femenino2$Benjumea_LRT_CM
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
SST <- sum((femenino2$Talla - mean(femenino2$Talla))^2)  # Suma total de cuadrados
r2_femenino <- 1 - (SSE / SST)
# Error estandar
ee_femenino <- sqrt(mean(residuos^2))
# Prueba de normalidad sobre los residuales
normalidad_femenino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_femenino <- bptest(lm(residuos ~ LRT_A + Edad + Etnia, data = femenino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(femenino),
R2 = r2_femenino,
EE = ee_femenino,
Normalidad = normalidad_femenino,
Homocedasticidad = homocedasticidad_femenino))
# Masculino
masculino2 <- train2[train2$Sexo == "Masculino",]
# Residuales
residuos <- masculino2$Talla - masculino2$Benjumea_LRT_CM
# R cuadrado
SSE <- sum(residuos^2, na.rm = TRUE)  # Suma de errores cuadráticos
SST <- sum((masculino2$Talla - mean(masculino2$Talla))^2)  # Suma total de cuadrados
r2_masculino <- 1 - (SSE / SST)
# Error estandar
ee_masculino <- sqrt(mean(residuos^2, na.rm = TRUE))
# Prueba de normalidad sobre los residuales
normalidad_masculino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_masculino <- bptest(lm(residuos ~ LRT_A + Edad + Etnia, data = masculino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(masculino),
R2 = r2_masculino,
EE = ee_masculino,
Normalidad = normalidad_masculino,
Homocedasticidad = homocedasticidad_masculino))
nombres <- c("Femenino", "Masculino")
modelos_tab <- cbind(nombres, modelos_tab)
modelos_tab |> gt()
modelos_tab <- data.frame(n = numeric(),
R2 = numeric(),
EE = numeric(),
Normalidad = numeric(),
Homocedasticidad = numeric())
# Femenino
train2 <- estimaciones[indices, ]
femenino2 <- train2[train2$Sexo == "Femenino",]
# Residuales
residuos <- femenino2$Talla - femenino2$Arango_LRM_R
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
SST <- sum((femenino2$Talla - mean(femenino2$Talla))^2)  # Suma total de cuadrados
r2_femenino <- 1 - (SSE / SST)
# Error estandar
ee_femenino <- sqrt(mean(residuos^2))
# Prueba de normalidad sobre los residuales
normalidad_femenino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_femenino <- bptest(lm(residuos ~ LRT_A + Edad, data = femenino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(femenino),
R2 = r2_femenino,
EE = ee_femenino,
Normalidad = normalidad_femenino,
Homocedasticidad = homocedasticidad_femenino))
# Masculino
masculino2 <- train2[train2$Sexo == "Masculino",]
# Residuales
residuos <- masculino2$Talla - masculino2$Arango_LRM_R
# R cuadrado
SSE <- sum(residuos^2, na.rm = TRUE)  # Suma de errores cuadráticos
SST <- sum((masculino2$Talla - mean(masculino2$Talla))^2)  # Suma total de cuadrados
r2_masculino <- 1 - (SSE / SST)
# Error estandar
ee_masculino <- sqrt(mean(residuos^2, na.rm = TRUE))
# Prueba de normalidad sobre los residuales
normalidad_masculino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_masculino <- bptest(lm(residuos ~ LRT_A + Edad, data = masculino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(masculino),
R2 = r2_masculino,
EE = ee_masculino,
Normalidad = normalidad_masculino,
Homocedasticidad = homocedasticidad_masculino))
nombres <- c("Femenino", "Masculino")
modelos_tab <- cbind(nombres, modelos_tab)
modelos_tab |> gt()
modelos_tab <- data.frame(n = numeric(),
R2 = numeric(),
EE = numeric(),
Normalidad = numeric(),
Homocedasticidad = numeric())
# Femenino
train2 <- estimaciones[indices, ]
femenino2 <- train2[train2$Sexo == "Femenino",]
# Residuales
residuos <- femenino2$Talla - femenino2$Arango_LRM_90
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
SST <- sum((femenino2$Talla - mean(femenino2$Talla))^2)  # Suma total de cuadrados
r2_femenino <- 1 - (SSE / SST)
# Error estandar
ee_femenino <- sqrt(mean(residuos^2))
# Prueba de normalidad sobre los residuales
normalidad_femenino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_femenino <- bptest(lm(residuos ~ LRT_A + Edad, data = femenino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(femenino),
R2 = r2_femenino,
EE = ee_femenino,
Normalidad = normalidad_femenino,
Homocedasticidad = homocedasticidad_femenino))
# Masculino
masculino2 <- train2[train2$Sexo == "Masculino",]
# Residuales
residuos <- masculino2$Talla - masculino2$Arango_LRM_90
# R cuadrado
SSE <- sum(residuos^2, na.rm = TRUE)  # Suma de errores cuadráticos
SST <- sum((masculino2$Talla - mean(masculino2$Talla))^2)  # Suma total de cuadrados
r2_masculino <- 1 - (SSE / SST)
# Error estandar
ee_masculino <- sqrt(mean(residuos^2, na.rm = TRUE))
# Prueba de normalidad sobre los residuales
normalidad_masculino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_masculino <- bptest(lm(residuos ~ LRT_A + Edad, data = masculino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(masculino),
R2 = r2_masculino,
EE = ee_masculino,
Normalidad = normalidad_masculino,
Homocedasticidad = homocedasticidad_masculino))
nombres <- c("Femenino", "Masculino")
modelos_tab <- cbind(nombres, modelos_tab)
modelos_tab |> gt()
View(femenino_test2)
modelos_tab_val <- data.frame(n = numeric(),
R2 = numeric(),
Error_Puro = numeric())
# Femenino
test2 <- estimaciones[-indices, ]
femenino_test2 <- test2[test2$Sexo == "Femenino",]
# Residuales
residuos <- femenino_test2$Talla - femenino_test2$Benjumea_LRT_A
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
SST <- sum((femenino_test2$Talla - mean(femenino_test2$Talla))^2)  # Suma total de cuadrados
R2_test <- 1 - (SSE / SST)
# Error puro
EP <- sqrt(mean(residuos^2))
modelos_tab_val <- rbind(modelos_tab_val,
data.frame(n = nrow(femenino_test2),
R2 = R2_test,
Error_Puro = EP))
# Masculino
masculino_test2 <- test2[test2$Sexo == "Masculino",]
# Residuales
residuos <- masculino_test2$Talla - masculino_test2$Benjumea_LRT_A
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
SST <- sum((masculino_test2$Talla - mean(masculino_test2$Talla))^2)  # Suma total de cuadrados
R2_test <- 1 - (SSE / SST)
# Error puro
EP <- sqrt(mean(residuos^2))
modelos_tab_val <- rbind(modelos_tab_val,
data.frame(n = nrow(masculino_test),
R2 = R2_test,
Error_Puro = EP))
nombres <- c("Femenino", "Masculino")
modelos_tab_val <- cbind(nombres, modelos_tab_val)
modelos_tab_val |> gt()
modelos_tab_val <- data.frame(n = numeric(),
R2 = numeric(),
Error_Puro = numeric())
# Femenino
test2 <- estimaciones[-indices, ]
femenino_test2 <- test2[test2$Sexo == "Femenino",]
# Residuales
residuos <- femenino_test2$Talla - femenino_test2$Benjumea_LRT_A
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
SST <- sum((femenino_test2$Talla - mean(femenino_test2$Talla))^2)  # Suma total de cuadrados
R2_test <- 1 - (SSE / SST)
# Error puro
EP <- sqrt(mean(residuos^2))
modelos_tab_val <- rbind(modelos_tab_val,
data.frame(n = nrow(femenino_test2),
R2 = R2_test,
Error_Puro = EP))
# Masculino
masculino_test2 <- test2[test2$Sexo == "Masculino",]
# Residuales
residuos <- masculino_test2$Talla - masculino_test2$Benjumea_LRT_A
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
SST <- sum((masculino_test2$Talla - mean(masculino_test2$Talla))^2)  # Suma total de cuadrados
R2_test <- 1 - (SSE / SST)
# Error puro
EP <- sqrt(mean(residuos^2))
modelos_tab_val <- rbind(modelos_tab_val,
data.frame(n = nrow(masculino_test),
R2 = R2_test,
Error_Puro = EP))
nombres <- c("Femenino", "Masculino")
modelos_tab_val <- cbind(nombres, modelos_tab_val)
modelos_tab_val |> gt()
# Residuales
residuos <- masculino_test2$Talla - masculino_test2$Benjumea_LRT_A
table_mcnemar <- as.matrix(table(estimaciones$Clasificacion, estimaciones$Clasificacion_Normal_LRT_A))
hola <-McNemarBowker_test_paired_cxc(table_mcnemar)
table_mcnemar <- as.matrix(table(estimaciones$Clasificacion, estimaciones$Clasificacion_Normal_LRT_A))
McNemarBowker_test_paired_cxc(table_mcnemar)
table_mcnemar <- as.matrix(table(estimaciones$Clasificacion, estimaciones$Clasificacion_Normal_LRT_CM))
McNemarBowker_test_paired_cxc(table_mcnemar)
table_mcnemar <- as.matrix(table(estimaciones$Clasificacion, estimaciones$Clasificacion_Benjumea_LRT_A))
McNemarBowker_test_paired_cxc(table_mcnemar)
table_mcnemar <- as.matrix(table(estimaciones$Clasificacion, estimaciones$Clasificacion_Benjumea_LRT_CM))
McNemarBowker_test_paired_cxc(table_mcnemar)
table_mcnemar <- as.matrix(table(estimaciones$Clasificacion, estimaciones$Clasificacion_Arango_LRM_R))
McNemarBowker_test_paired_cxc(table_mcnemar)
table_mcnemar <- as.matrix(table(estimaciones$Clasificacion, estimaciones$Clasificacion_Arango_LRM_90))
McNemarBowker_test_paired_cxc(table_mcnemar)
# Transformar a formato largo
df_long <- proporciones_tab %>%
pivot_longer(cols = Delgadez:Obesidad, names_to = "Categoria", values_to = "Proporcion")
# Gráfico de barras apiladas
ggplot(df_long, aes(x = Estimacion, y = Proporcion, fill = Categoria)) +
geom_bar(stat = "identity", position = "fill") +  # "fill" para proporciones
scale_y_continuous(labels = scales::percent) +    # Convertir eje Y a porcentaje
labs(x = "Estimación", y = "Proporción", fill = "Categoría",
title = "Comparación de proporciones por estimación") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas para mejor visibilidad
mnt <- McNemarBowker_test_paired_cxc(table_mcnemar)
mnt$Pvalue
# Transformar a formato largo
df_long <- proporciones_tab %>%
pivot_longer(cols = Delgadez:Obesidad, names_to = "Categoria", values_to = "Proporcion")
# Gráfico de barras apiladas
ggplot(df_long, aes(x = Estimacion, y = Proporcion, fill = Categoria)) +
geom_bar(stat = "identity", position = "fill") +  # "fill" para proporciones
scale_y_continuous(labels = scales::percent) +    # Convertir eje Y a porcentaje
labs(x = "Estimación", y = "Proporción", fill = "Categoría",
title = "Comparación de proporciones por estimación") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas para mejor visibilidad
p_mcnemar |> gt()
