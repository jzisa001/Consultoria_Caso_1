residuos <- femenino2$Talla - femenino2$Benjumea_LRT_A
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
SST <- sum((femenino2$Talla - mean(femenino2$Talla))^2)  # Suma total de cuadrados
r2_femenino <- 1 - (SSE / SST)
# Error estandar
ee_femenino <- sqrt(mean(residuos^2))
# Prueba de normalidad sobre los residuales
normalidad_femenino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_femenino <- bptest(lm(residuos ~ LRT_A + Edad + Etnia, data = femenino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(femenino),
R2 = r2_femenino,
EE = ee_femenino,
Normalidad = normalidad_femenino,
Homocedasticidad = homocedasticidad_femenino))
# Masculino
masculino2 <- train2[train2$Sexo == "Masculino",]
# Residuales
residuos <- masculino2$Talla - masculino2$Benjumea_LRT_A
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
SST <- sum((masculino2$Talla - mean(masculino2$Talla))^2)  # Suma total de cuadrados
r2_masculino <- 1 - (SSE / SST)
# Error estandar
ee_masculino <- sqrt(mean(residuos^2))
# Prueba de normalidad sobre los residuales
normalidad_masculino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_masculino <- bptest(lm(residuos ~ LRT_A + Edad + Etnia, data = masculino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(masculino),
R2 = r2_masculino,
EE = ee_masculino,
Normalidad = normalidad_masculino,
Homocedasticidad = homocedasticidad_masculino))
nombres <- c("Femenino", "Masculino")
modelos_tab <- cbind(nombres, modelos_tab)
modelos_tab |> gt()
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
# R cuadrado
SSE <- sum(residuos^2, na.rm = TRUE)  # Suma de errores cuadráticos
SST <- sum((masculino2$Talla - mean(masculino2$Talla))^2)  # Suma total de cuadrados
r2_masculino <- 1 - (SSE / SST)
# Error estandar
ee_masculino <- sqrt(mean(residuos^2))
# Prueba de normalidad sobre los residuales
normalidad_masculino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_masculino <- bptest(lm(residuos ~ LRT_A + Edad + Etnia, data = masculino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(masculino),
R2 = r2_masculino,
EE = ee_masculino,
Normalidad = normalidad_masculino,
Homocedasticidad = homocedasticidad_masculino))
nombres <- c("Femenino", "Masculino")
modelos_tab <- cbind(nombres, modelos_tab)
modelos_tab |> gt()
modelos_tab <- data.frame(n = numeric(),
R2 = numeric(),
EE = numeric(),
Normalidad = numeric(),
Homocedasticidad = numeric())
# Femenino
train2 <- estimaciones[indices, ]
femenino2 <- train2[train2$Sexo == "Femenino",]
# Residuales
residuos <- femenino2$Talla - femenino2$Benjumea_LRT_A
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
SST <- sum((femenino2$Talla - mean(femenino2$Talla))^2)  # Suma total de cuadrados
r2_femenino <- 1 - (SSE / SST)
# Error estandar
ee_femenino <- sqrt(mean(residuos^2))
# Prueba de normalidad sobre los residuales
normalidad_femenino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_femenino <- bptest(lm(residuos ~ LRT_A + Edad + Etnia, data = femenino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(femenino),
R2 = r2_femenino,
EE = ee_femenino,
Normalidad = normalidad_femenino,
Homocedasticidad = homocedasticidad_femenino))
# Masculino
masculino2 <- train2[train2$Sexo == "Masculino",]
# Residuales
residuos <- masculino2$Talla - masculino2$Benjumea_LRT_A
# R cuadrado
SSE <- sum(residuos^2, na.rm = TRUE)  # Suma de errores cuadráticos
SST <- sum((masculino2$Talla - mean(masculino2$Talla))^2)  # Suma total de cuadrados
r2_masculino <- 1 - (SSE / SST)
# Error estandar
ee_masculino <- sqrt(mean(residuos^2))
# Prueba de normalidad sobre los residuales
normalidad_masculino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_masculino <- bptest(lm(residuos ~ LRT_A + Edad + Etnia, data = masculino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(masculino),
R2 = r2_masculino,
EE = ee_masculino,
Normalidad = normalidad_masculino,
Homocedasticidad = homocedasticidad_masculino))
nombres <- c("Femenino", "Masculino")
modelos_tab <- cbind(nombres, modelos_tab)
modelos_tab |> gt()
# Error estandar
ee_masculino <- sqrt(mean(residuos^2, na.rm = TRUE))
# Prueba de normalidad sobre los residuales
normalidad_masculino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_masculino <- bptest(lm(residuos ~ LRT_A + Edad + Etnia, data = masculino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(masculino),
R2 = r2_masculino,
EE = ee_masculino,
Normalidad = normalidad_masculino,
Homocedasticidad = homocedasticidad_masculino))
nombres <- c("Femenino", "Masculino")
modelos_tab <- cbind(nombres, modelos_tab)
modelos_tab |> gt()
modelos_tab <- data.frame(n = numeric(),
R2 = numeric(),
EE = numeric(),
Normalidad = numeric(),
Homocedasticidad = numeric())
# Femenino
train2 <- estimaciones[indices, ]
femenino2 <- train2[train2$Sexo == "Femenino",]
# Residuales
residuos <- femenino2$Talla - femenino2$Benjumea_LRT_A
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
SST <- sum((femenino2$Talla - mean(femenino2$Talla))^2)  # Suma total de cuadrados
r2_femenino <- 1 - (SSE / SST)
# Error estandar
ee_femenino <- sqrt(mean(residuos^2))
# Prueba de normalidad sobre los residuales
normalidad_femenino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_femenino <- bptest(lm(residuos ~ LRT_A + Edad + Etnia, data = femenino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(femenino),
R2 = r2_femenino,
EE = ee_femenino,
Normalidad = normalidad_femenino,
Homocedasticidad = homocedasticidad_femenino))
# Masculino
masculino2 <- train2[train2$Sexo == "Masculino",]
# Residuales
residuos <- masculino2$Talla - masculino2$Benjumea_LRT_A
# R cuadrado
SSE <- sum(residuos^2, na.rm = TRUE)  # Suma de errores cuadráticos
SST <- sum((masculino2$Talla - mean(masculino2$Talla))^2)  # Suma total de cuadrados
r2_masculino <- 1 - (SSE / SST)
# Error estandar
ee_masculino <- sqrt(mean(residuos^2, na.rm = TRUE))
# Prueba de normalidad sobre los residuales
normalidad_masculino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_masculino <- bptest(lm(residuos ~ LRT_A + Edad + Etnia, data = masculino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(masculino),
R2 = r2_masculino,
EE = ee_masculino,
Normalidad = normalidad_masculino,
Homocedasticidad = homocedasticidad_masculino))
nombres <- c("Femenino", "Masculino")
modelos_tab <- cbind(nombres, modelos_tab)
modelos_tab |> gt()
modelos_tab <- data.frame(n = numeric(),
R2 = numeric(),
EE = numeric(),
Normalidad = numeric(),
Homocedasticidad = numeric())
# Femenino
train2 <- estimaciones[indices, ]
femenino2 <- train2[train2$Sexo == "Femenino",]
# Residuales
residuos <- femenino2$Talla - femenino2$Benjumea_LRT_CM
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
SST <- sum((femenino2$Talla - mean(femenino2$Talla))^2)  # Suma total de cuadrados
r2_femenino <- 1 - (SSE / SST)
# Error estandar
ee_femenino <- sqrt(mean(residuos^2))
# Prueba de normalidad sobre los residuales
normalidad_femenino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_femenino <- bptest(lm(residuos ~ LRT_A + Edad + Etnia, data = femenino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(femenino),
R2 = r2_femenino,
EE = ee_femenino,
Normalidad = normalidad_femenino,
Homocedasticidad = homocedasticidad_femenino))
# Masculino
masculino2 <- train2[train2$Sexo == "Masculino",]
# Residuales
residuos <- masculino2$Talla - masculino2$Benjumea_LRT_CM
# R cuadrado
SSE <- sum(residuos^2, na.rm = TRUE)  # Suma de errores cuadráticos
SST <- sum((masculino2$Talla - mean(masculino2$Talla))^2)  # Suma total de cuadrados
r2_masculino <- 1 - (SSE / SST)
# Error estandar
ee_masculino <- sqrt(mean(residuos^2, na.rm = TRUE))
# Prueba de normalidad sobre los residuales
normalidad_masculino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_masculino <- bptest(lm(residuos ~ LRT_A + Edad + Etnia, data = masculino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(masculino),
R2 = r2_masculino,
EE = ee_masculino,
Normalidad = normalidad_masculino,
Homocedasticidad = homocedasticidad_masculino))
nombres <- c("Femenino", "Masculino")
modelos_tab <- cbind(nombres, modelos_tab)
modelos_tab |> gt()
modelos_tab <- data.frame(n = numeric(),
R2 = numeric(),
EE = numeric(),
Normalidad = numeric(),
Homocedasticidad = numeric())
# Femenino
train2 <- estimaciones[indices, ]
femenino2 <- train2[train2$Sexo == "Femenino",]
# Residuales
residuos <- femenino2$Talla - femenino2$Arango_LRM_R
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
SST <- sum((femenino2$Talla - mean(femenino2$Talla))^2)  # Suma total de cuadrados
r2_femenino <- 1 - (SSE / SST)
# Error estandar
ee_femenino <- sqrt(mean(residuos^2))
# Prueba de normalidad sobre los residuales
normalidad_femenino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_femenino <- bptest(lm(residuos ~ LRT_A + Edad, data = femenino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(femenino),
R2 = r2_femenino,
EE = ee_femenino,
Normalidad = normalidad_femenino,
Homocedasticidad = homocedasticidad_femenino))
# Masculino
masculino2 <- train2[train2$Sexo == "Masculino",]
# Residuales
residuos <- masculino2$Talla - masculino2$Arango_LRM_R
# R cuadrado
SSE <- sum(residuos^2, na.rm = TRUE)  # Suma de errores cuadráticos
SST <- sum((masculino2$Talla - mean(masculino2$Talla))^2)  # Suma total de cuadrados
r2_masculino <- 1 - (SSE / SST)
# Error estandar
ee_masculino <- sqrt(mean(residuos^2, na.rm = TRUE))
# Prueba de normalidad sobre los residuales
normalidad_masculino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_masculino <- bptest(lm(residuos ~ LRT_A + Edad, data = masculino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(masculino),
R2 = r2_masculino,
EE = ee_masculino,
Normalidad = normalidad_masculino,
Homocedasticidad = homocedasticidad_masculino))
nombres <- c("Femenino", "Masculino")
modelos_tab <- cbind(nombres, modelos_tab)
modelos_tab |> gt()
modelos_tab <- data.frame(n = numeric(),
R2 = numeric(),
EE = numeric(),
Normalidad = numeric(),
Homocedasticidad = numeric())
# Femenino
train2 <- estimaciones[indices, ]
femenino2 <- train2[train2$Sexo == "Femenino",]
# Residuales
residuos <- femenino2$Talla - femenino2$Arango_LRM_90
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
SST <- sum((femenino2$Talla - mean(femenino2$Talla))^2)  # Suma total de cuadrados
r2_femenino <- 1 - (SSE / SST)
# Error estandar
ee_femenino <- sqrt(mean(residuos^2))
# Prueba de normalidad sobre los residuales
normalidad_femenino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_femenino <- bptest(lm(residuos ~ LRT_A + Edad, data = femenino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(femenino),
R2 = r2_femenino,
EE = ee_femenino,
Normalidad = normalidad_femenino,
Homocedasticidad = homocedasticidad_femenino))
# Masculino
masculino2 <- train2[train2$Sexo == "Masculino",]
# Residuales
residuos <- masculino2$Talla - masculino2$Arango_LRM_90
# R cuadrado
SSE <- sum(residuos^2, na.rm = TRUE)  # Suma de errores cuadráticos
SST <- sum((masculino2$Talla - mean(masculino2$Talla))^2)  # Suma total de cuadrados
r2_masculino <- 1 - (SSE / SST)
# Error estandar
ee_masculino <- sqrt(mean(residuos^2, na.rm = TRUE))
# Prueba de normalidad sobre los residuales
normalidad_masculino <- lillie.test(residuos)$p.value
# Prueba de homocedasticidad sobre los residuales
homocedasticidad_masculino <- bptest(lm(residuos ~ LRT_A + Edad, data = masculino2))$p.value
modelos_tab <- rbind(modelos_tab,
data.frame(n = nrow(masculino),
R2 = r2_masculino,
EE = ee_masculino,
Normalidad = normalidad_masculino,
Homocedasticidad = homocedasticidad_masculino))
nombres <- c("Femenino", "Masculino")
modelos_tab <- cbind(nombres, modelos_tab)
modelos_tab |> gt()
View(femenino_test2)
modelos_tab_val <- data.frame(n = numeric(),
R2 = numeric(),
Error_Puro = numeric())
# Femenino
test2 <- estimaciones[-indices, ]
femenino_test2 <- test2[test2$Sexo == "Femenino",]
# Residuales
residuos <- femenino_test2$Talla - femenino_test2$Benjumea_LRT_A
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
SST <- sum((femenino_test2$Talla - mean(femenino_test2$Talla))^2)  # Suma total de cuadrados
R2_test <- 1 - (SSE / SST)
# Error puro
EP <- sqrt(mean(residuos^2))
modelos_tab_val <- rbind(modelos_tab_val,
data.frame(n = nrow(femenino_test2),
R2 = R2_test,
Error_Puro = EP))
# Masculino
masculino_test2 <- test2[test2$Sexo == "Masculino",]
# Residuales
residuos <- masculino_test2$Talla - masculino_test2$Benjumea_LRT_A
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
SST <- sum((masculino_test2$Talla - mean(masculino_test2$Talla))^2)  # Suma total de cuadrados
R2_test <- 1 - (SSE / SST)
# Error puro
EP <- sqrt(mean(residuos^2))
modelos_tab_val <- rbind(modelos_tab_val,
data.frame(n = nrow(masculino_test),
R2 = R2_test,
Error_Puro = EP))
nombres <- c("Femenino", "Masculino")
modelos_tab_val <- cbind(nombres, modelos_tab_val)
modelos_tab_val |> gt()
modelos_tab_val <- data.frame(n = numeric(),
R2 = numeric(),
Error_Puro = numeric())
# Femenino
test2 <- estimaciones[-indices, ]
femenino_test2 <- test2[test2$Sexo == "Femenino",]
# Residuales
residuos <- femenino_test2$Talla - femenino_test2$Benjumea_LRT_A
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
SST <- sum((femenino_test2$Talla - mean(femenino_test2$Talla))^2)  # Suma total de cuadrados
R2_test <- 1 - (SSE / SST)
# Error puro
EP <- sqrt(mean(residuos^2))
modelos_tab_val <- rbind(modelos_tab_val,
data.frame(n = nrow(femenino_test2),
R2 = R2_test,
Error_Puro = EP))
# Masculino
masculino_test2 <- test2[test2$Sexo == "Masculino",]
# Residuales
residuos <- masculino_test2$Talla - masculino_test2$Benjumea_LRT_A
# R cuadrado
SSE <- sum(residuos^2)  # Suma de errores cuadráticos
SST <- sum((masculino_test2$Talla - mean(masculino_test2$Talla))^2)  # Suma total de cuadrados
R2_test <- 1 - (SSE / SST)
# Error puro
EP <- sqrt(mean(residuos^2))
modelos_tab_val <- rbind(modelos_tab_val,
data.frame(n = nrow(masculino_test),
R2 = R2_test,
Error_Puro = EP))
nombres <- c("Femenino", "Masculino")
modelos_tab_val <- cbind(nombres, modelos_tab_val)
modelos_tab_val |> gt()
# Residuales
residuos <- masculino_test2$Talla - masculino_test2$Benjumea_LRT_A
table_mcnemar <- as.matrix(table(estimaciones$Clasificacion, estimaciones$Clasificacion_Normal_LRT_A))
hola <-McNemarBowker_test_paired_cxc(table_mcnemar)
table_mcnemar <- as.matrix(table(estimaciones$Clasificacion, estimaciones$Clasificacion_Normal_LRT_A))
McNemarBowker_test_paired_cxc(table_mcnemar)
table_mcnemar <- as.matrix(table(estimaciones$Clasificacion, estimaciones$Clasificacion_Normal_LRT_CM))
McNemarBowker_test_paired_cxc(table_mcnemar)
table_mcnemar <- as.matrix(table(estimaciones$Clasificacion, estimaciones$Clasificacion_Benjumea_LRT_A))
McNemarBowker_test_paired_cxc(table_mcnemar)
table_mcnemar <- as.matrix(table(estimaciones$Clasificacion, estimaciones$Clasificacion_Benjumea_LRT_CM))
McNemarBowker_test_paired_cxc(table_mcnemar)
table_mcnemar <- as.matrix(table(estimaciones$Clasificacion, estimaciones$Clasificacion_Arango_LRM_R))
McNemarBowker_test_paired_cxc(table_mcnemar)
table_mcnemar <- as.matrix(table(estimaciones$Clasificacion, estimaciones$Clasificacion_Arango_LRM_90))
McNemarBowker_test_paired_cxc(table_mcnemar)
# Transformar a formato largo
df_long <- proporciones_tab %>%
pivot_longer(cols = Delgadez:Obesidad, names_to = "Categoria", values_to = "Proporcion")
# Gráfico de barras apiladas
ggplot(df_long, aes(x = Estimacion, y = Proporcion, fill = Categoria)) +
geom_bar(stat = "identity", position = "fill") +  # "fill" para proporciones
scale_y_continuous(labels = scales::percent) +    # Convertir eje Y a porcentaje
labs(x = "Estimación", y = "Proporción", fill = "Categoría",
title = "Comparación de proporciones por estimación") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas para mejor visibilidad
mnt <- McNemarBowker_test_paired_cxc(table_mcnemar)
mnt$Pvalue
# Transformar a formato largo
df_long <- proporciones_tab %>%
pivot_longer(cols = Delgadez:Obesidad, names_to = "Categoria", values_to = "Proporcion")
# Gráfico de barras apiladas
ggplot(df_long, aes(x = Estimacion, y = Proporcion, fill = Categoria)) +
geom_bar(stat = "identity", position = "fill") +  # "fill" para proporciones
scale_y_continuous(labels = scales::percent) +    # Convertir eje Y a porcentaje
labs(x = "Estimación", y = "Proporción", fill = "Categoría",
title = "Comparación de proporciones por estimación") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas para mejor visibilidad
p_mcnemar |> gt()
femenino <- subset(datos$Sexo == "Femenino")
# Librerias
library(readxl)
library(tidyverse)
library(nortest)
library(dplyr)
library(ggplot2)
library(GGally) # para la funcion ggpairs
library(gt)
library(gtExtras)
library(moments)
library(leaps)
library(MASS)
library(lmtest)
library(car)
library(BSDA) # Test del signo
library(glmnet)
library(glmtoolbox)
library(MASS)
library(rsample)
library(lawstat)
datos <- read_excel("Datos/Corregida - COMPILADO DATOS COMUNIDAD DE CUIDADO Y CENTRO DÍA.xlsx",
range = "B2:AN561", col_types = c("date",
"skip", "text", "text", "text", "skip",
"text", "numeric", "text", "skip",
"skip", "skip", "skip", "numeric",
"skip", "skip", "skip", "skip", "numeric",
"skip", "skip", "skip", "skip", "numeric",
"skip", "skip", "skip", "skip", "numeric",
"skip", "skip", "skip", "skip", "numeric",
"skip", "skip", "skip", "skip", "numeric"))
colnames(datos) <- c("Fecha", "Localidad", "Programa", "Unidad_atencion",
"Sexo", "Edad", "Etnia", "Peso", "Talla",
"LRT_CM","LRT_A", "LRM_90","LRM_R")
datos$Sexo <- as.factor(datos$Sexo)
datos$Etnia <- as.factor(datos$Etnia)
datos <- datos[-which(datos$Edad<60),] # >60
datos <- datos |> filter(!(abs(LRT_A-LRT_CM) > 3 | abs(LRM_90-LRM_R) > 3))
datos <- datos |> as.data.frame()
head(datos) |> gt() |> gtExtras::gt_theme_538() |> tab_options(table.font.size = 9)
#| layout-ncol: 2
datos_resumen <- datos %>%
dplyr::count(Sexo) %>%
dplyr::mutate(porcentaje = round(n / sum(n) * 100, digits=3))
datos_resumen |> gt() |> gtExtras::gt_theme_538()
ggplot(datos_resumen, aes(x = "", y = porcentaje, fill = Sexo)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y", start = 0) +
theme_void() +
labs(title = "Porcentaje de Hombres y Mujeres", fill = "Sexo") +
geom_text(aes(label = paste0(round(porcentaje, 1), "%")),
position = position_stack(vjust = 0.5), color = "white")
summary(datos$Edad)
femenino <- subset(datos$Sexo == "Femenino")
?subset
femenino <- subset(datos, Sexo == "Femenino")
summary(femenino$Edad)
femenino <- subset(datos, Sexo == "Femenino")
summary(femenino$Edad)
#| layout-ncol: 2
hist(femenino$Edad, freq=FALSE, main = 'Histograma de Edad sexo femenino', xlab = 'Edad', ylab = 'Densidad')
lines(density(femenino$Edad), col ="red")
box_Edad <- boxplot(femenino$Edad, main = "Boxplot de Edad sexo femenino")
femenino[which(femenino$Edad>box_Edad$stats[5] | femenino$Edad<box_Edad$stats[1]),-c(1,2)] |>
gt() |> gtExtras::gt_theme_538() |>
tab_options(table.font.size = 9)
masculino <- subset(datos, Sexo == "Masculino")
summary(masculino$Edad)
#| layout-ncol: 2
hist(masculino$Edad, freq=FALSE, main = 'Histograma de Edad sexo masculino', xlab = 'Edad', ylab = 'Densidad')
lines(density(masculino$Edad), col ="red")
box_Edad <- boxplot(masculino$Edad, main = "Boxplot de Edad sexo masculino")
masculino[which(masculino$Edad>box_Edad$stats[5] | masculino$Edad<box_Edad$stats[1]),-c(1,2)] |>
gt() |> gtExtras::gt_theme_538() |>
tab_options(table.font.size = 9)
femenino |>
dplyr::count(Etnia) |>
dplyr::mutate(porcentaje = n / sum(n)) |>
gt() |> gtExtras::gt_theme_538() |> fmt_percent(column = 3, decimals = 3, dec_mark = ".")
